use s2n_tls_sys::s2n_client_hello_parse_message;




enum ClientHelloHashTypes {
    JA3,
}



impl From<ClientHelloHashTypes> for s2n_tls_sys::s2n_fingerprint_type::Type {
    fn from(value: ClientHelloHashTypes) -> Self {
        match value {
            ClientHelloHashTypes::JA3 => s2n_tls_sys::s2n_fingerprint_type::FINGERPRINT_JA3,
        }
    }
}

pub struct ClientHello {
    // should this be NonNull
    handle: *mut s2n_tls_sys::s2n_client_hello,
}

impl ClientHello {
    fn parse_client_hello(hello_bytes: &[u8]) -> Result<ClientHello, u32> {
        let handle = unsafe {
            s2n_client_hello_parse_message(hello_bytes.as_ptr(), hello_bytes.len() as u32)
        };
        if handle.is_null() {
            Err(1)
        } else {
            Ok(ClientHello { handle })
        }
    }

    fn get_hash(&self, hash: ClientHelloHashTypes) -> Vec<u8> {
        let max_hash_size:u32 = 16;
        let mut hash: Vec<u8> = Vec::with_capacity(max_hash_size as usize);
        let hash_ptr = hash.as_mut_ptr();
        let mut hash_size: u32 = 0;
        let hash_size_ptr: *mut u32 = &mut hash_size;
        let mut str_size: u32 = 0;
        let str_size_ptr: *mut u32 = &mut str_size;
        let result = unsafe {
            s2n_tls_sys::s2n_client_hello_get_fingerprint_hash(self.handle, ClientHelloHashTypes::JA3.into(), max_hash_size, hash_ptr, hash_size_ptr, str_size_ptr)
        };
        hash
    }
}

impl Drop for ClientHello {
    fn drop(&mut self) {
        println!("doing a drop over here");
        // let raw = NonNull::new(raw)?;
        let handle_address: *mut *mut s2n_tls_sys::s2n_client_hello = &mut self.handle;
        let result = unsafe {
            s2n_tls_sys::s2n_client_hello_free(handle_address)
        };
        println!("result was {:?}", result);
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn invalid_client_bytes() {
        let some_bytes = vec![1, 5, 76, 2];
        let result = ClientHello::parse_client_hello(&some_bytes);
        assert!(result.is_err());
    }

    #[test]
    fn valid_client_bytes() {
        let raw_client_hello = vec![
            0x01, 0x00, 0x00, 0xEC,
            0x03, 0x03, 0x90, 0xe8, 0xcc, 0xee, 0xe5, 0x70, 0xa2, 0xa1, 0x2f,
            0x6b, 0x69, 0xd2, 0x66, 0x96, 0x0f, 0xcf, 0x20, 0xd5, 0x32, 0x6e,
            0xc4, 0xb2, 0x8c, 0xc7, 0xbd, 0x0a, 0x06, 0xc2, 0xa5, 0x14, 0xfc,
            0x34, 0x20, 0xaf, 0x72, 0xbf, 0x39, 0x99, 0xfb, 0x20, 0x70, 0xc3,
            0x10, 0x83, 0x0c, 0xee, 0xfb, 0xfa, 0x72, 0xcc, 0x5d, 0xa8, 0x99,
            0xb4, 0xc5, 0x53, 0xd6, 0x3d, 0xa0, 0x53, 0x7a, 0x5c, 0xbc, 0xf5,
            0x0b, 0x00, 0x1e, 0xc0, 0x2b, 0xc0, 0x2f, 0xcc, 0xa9, 0xcc, 0xa8,
            0xc0, 0x2c, 0xc0, 0x30, 0xc0, 0x0a, 0xc0, 0x09, 0xc0, 0x13, 0xc0,
            0x14, 0x00, 0x33, 0x00, 0x39, 0x00, 0x2f, 0x00, 0x35, 0x00, 0x0a,
            0x01, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x23, 0x00, 0x21, 0x00,
            0x00, 0x1e, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
            0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x6d,
            0x6f, 0x7a, 0x69, 0x6c, 0x6c, 0x61, 0x2e, 0x6f, 0x72, 0x67, 0x00,
            0x17, 0x00, 0x00, 0xff, 0x01, 0x00, 0x01, 0x00, 0x00, 0x0a, 0x00,
            0x0a, 0x00, 0x08, 0x00, 0x1d, 0x00, 0x17, 0x00, 0x18, 0x00, 0x19,
            0x00, 0x0b, 0x00, 0x02, 0x01, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00,
            0x10, 0x00, 0x0e, 0x00, 0x0c, 0x02, 0x68, 0x32, 0x08, 0x68, 0x74,
            0x74, 0x70, 0x2f, 0x31, 0x2e, 0x31, 0x00, 0x05, 0x00, 0x05, 0x01,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x18, 0x00, 0x16, 0x04,
            0x03, 0x05, 0x03, 0x06, 0x03, 0x08, 0x04, 0x08, 0x05, 0x08, 0x06,
            0x04, 0x01, 0x05, 0x01, 0x06, 0x01, 0x02, 0x03, 0x02, 0x01, 0x00,
            0x1c, 0x00, 0x02, 0x40, 0x00
        ];
        let fingerprint_str = "771,49195-49199-52393-52392-49196-49200-\
                                    49162-49161-49171-49172-51-57-47-53-10,0-\
                                    23-65281-10-11-35-16-5-13-28,29-23-24-25,0";
        let expected_hash_hex = "839bbe3ed07fed922ded5aaf714d6842";
        let expected_hash: Vec<u8> = (0..expected_hash_hex.len())
            .step_by(2)
            .map(|i| u8::from_str_radix(&expected_hash_hex[i..i+2], 16).unwrap())
            .collect();
        let hash_bytes = ClientHello::parse_client_hello(&raw_client_hello).unwrap();
        let computed_hash = hash_bytes.get_hash(ClientHelloHashTypes::JA3);
        assert_eq!(computed_hash, expected_hash);


        //S2N_BLOB_FROM_HEX(expected_hash, "839bbe3ed07fed922ded5aaf714d6842");
    }

}