use std::ptr::NonNull;
use std::sync::atomic::AtomicU32;
use std::sync::atomic::Ordering;

use s2n_tls_sys::s2n_client_hello_parse_message;

use crate::error::Fallible;

pub enum ClientHelloHashTypes {
    JA3,
}

// this is the size of the MD5 hash digest that is used for the JA3 fingerprint
const MD5_HASH_SIZE: u32 = 16;

impl From<ClientHelloHashTypes> for s2n_tls_sys::s2n_fingerprint_type::Type {
    fn from(value: ClientHelloHashTypes) -> Self {
        match value {
            ClientHelloHashTypes::JA3 => s2n_tls_sys::s2n_fingerprint_type::FINGERPRINT_JA3,
        }
    }
}

pub struct ClientHello {
    handle: NonNull<s2n_tls_sys::s2n_client_hello>,
}

impl ClientHello {
    pub fn parse_client_hello(hello_bytes: &[u8]) -> Result<ClientHello, crate::error::Error> {
        let handle = unsafe {
            s2n_client_hello_parse_message(hello_bytes.as_ptr(), hello_bytes.len() as u32)
                .into_result()?
        };
        Ok(ClientHello { handle })
    }

    pub fn get_hash(&self, hash: ClientHelloHashTypes) -> Vec<u8> {
        let mut hash: Vec<u8> = Vec::with_capacity(MD5_HASH_SIZE as usize);
        unsafe {
            hash.set_len(MD5_HASH_SIZE as usize);
        }
        let mut hash_size: u32 = 0;
        let mut str_size: u32 = 0;
        unsafe {
            s2n_tls_sys::s2n_client_hello_get_fingerprint_hash(
                self.handle.as_ptr(),
                ClientHelloHashTypes::JA3.into(),
                MD5_HASH_SIZE,
                hash.as_mut_ptr(),
                &mut hash_size,
                &mut str_size,
            )
            .into_result()
            .unwrap() // panic because any error that are experienced are unrecoverable
        };
        println!("The has size was {hash_size}");
        println!("The string size was {str_size}");
        hash
    }

    pub fn get_fingerprint_string(&self, hash: ClientHelloHashTypes) -> Vec<u8> {
        // this is the capacity for which we try to construct the string
        let mut capacity = 256;
        loop {
            let mut string: Vec<u8> = Vec::with_capacity(capacity as usize);
            unsafe { string.set_len(capacity as usize) };
            let mut output_size = 0;
            let result = unsafe {
                s2n_tls_sys::s2n_client_hello_get_fingerprint_string(
                    self.handle.as_ptr(),
                    ClientHelloHashTypes::JA3.into(),
                    capacity,
                    string.as_mut_ptr(),
                    &mut output_size,
                )
                .into_result()
            };

            // if the fingerprint failed because the buffer was too small, double
            // the buffer size and try again
            // if it failed for other reason, fail. This isn't expected to happen
            if let Err(s2n_error) = result {
                if s2n_error.name() == "TOO_BIG" {
                    capacity *= 2;
                } else {
                    panic!("{}", s2n_error);
                }
            } else {
                return string;
            }
        }
    }
}

impl Drop for ClientHello {
    fn drop(&mut self) {
        println!("doing a drop over here");
        let result = unsafe {
            s2n_tls_sys::s2n_client_hello_free(&mut self.handle.as_ptr())
                .into_result()
                .unwrap()
        };
        println!("result was {:?}", result);
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn invalid_client_bytes() {
        let some_bytes = vec![1, 5, 76, 2];
        let result = ClientHello::parse_client_hello(&some_bytes);
        assert!(result.is_err());
    }

    /*
    struct s2n_client_hello *s2n_client_hello_parse_message(const uint8_t *raw_message, uint32_t raw_message_size)
    {
        struct s2n_client_hello *result = NULL;
        PTR_GUARD_RESULT(s2n_client_hello_parse_message_impl(&result, raw_message, raw_message_size));
        return result;
    }
    */

    #[test]
    fn valid_client_bytes() {
        let raw_client_hello = vec![
            0x01, 0x00, 0x00, 0xEC, 0x03, 0x03, 0x90, 0xe8, 0xcc, 0xee, 0xe5, 0x70, 0xa2, 0xa1,
            0x2f, 0x6b, 0x69, 0xd2, 0x66, 0x96, 0x0f, 0xcf, 0x20, 0xd5, 0x32, 0x6e, 0xc4, 0xb2,
            0x8c, 0xc7, 0xbd, 0x0a, 0x06, 0xc2, 0xa5, 0x14, 0xfc, 0x34, 0x20, 0xaf, 0x72, 0xbf,
            0x39, 0x99, 0xfb, 0x20, 0x70, 0xc3, 0x10, 0x83, 0x0c, 0xee, 0xfb, 0xfa, 0x72, 0xcc,
            0x5d, 0xa8, 0x99, 0xb4, 0xc5, 0x53, 0xd6, 0x3d, 0xa0, 0x53, 0x7a, 0x5c, 0xbc, 0xf5,
            0x0b, 0x00, 0x1e, 0xc0, 0x2b, 0xc0, 0x2f, 0xcc, 0xa9, 0xcc, 0xa8, 0xc0, 0x2c, 0xc0,
            0x30, 0xc0, 0x0a, 0xc0, 0x09, 0xc0, 0x13, 0xc0, 0x14, 0x00, 0x33, 0x00, 0x39, 0x00,
            0x2f, 0x00, 0x35, 0x00, 0x0a, 0x01, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x23, 0x00,
            0x21, 0x00, 0x00, 0x1e, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x74,
            0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x6d, 0x6f, 0x7a, 0x69, 0x6c,
            0x6c, 0x61, 0x2e, 0x6f, 0x72, 0x67, 0x00, 0x17, 0x00, 0x00, 0xff, 0x01, 0x00, 0x01,
            0x00, 0x00, 0x0a, 0x00, 0x0a, 0x00, 0x08, 0x00, 0x1d, 0x00, 0x17, 0x00, 0x18, 0x00,
            0x19, 0x00, 0x0b, 0x00, 0x02, 0x01, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x10, 0x00,
            0x0e, 0x00, 0x0c, 0x02, 0x68, 0x32, 0x08, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x31, 0x2e,
            0x31, 0x00, 0x05, 0x00, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x18,
            0x00, 0x16, 0x04, 0x03, 0x05, 0x03, 0x06, 0x03, 0x08, 0x04, 0x08, 0x05, 0x08, 0x06,
            0x04, 0x01, 0x05, 0x01, 0x06, 0x01, 0x02, 0x03, 0x02, 0x01, 0x00, 0x1c, 0x00, 0x02,
            0x40, 0x00,
        ];
        let fingerprint_str = "771,49195-49199-52393-52392-49196-49200-\
                                    49162-49161-49171-49172-51-57-47-53-10,0-\
                                    23-65281-10-11-35-16-5-13-28,29-23-24-25,0";
        let expected_hash_hex = "839bbe3ed07fed922ded5aaf714d6842";
        // convert the expected hash into bytes
        let expected_hash: Vec<u8> = (0..expected_hash_hex.len())
            .step_by(2)
            .map(|i| u8::from_str_radix(&expected_hash_hex[i..i + 2], 16).unwrap())
            .collect();
        let mut client_hello_ptr: *mut s2n_tls_sys::s2n_client_hello = std::ptr::null_mut();
        crate::init::init();
        let client_hello = ClientHello::parse_client_hello(raw_client_hello.as_slice()).unwrap();
        let hash = client_hello.get_hash(ClientHelloHashTypes::JA3);
        assert_eq!(hash, expected_hash);

        //let computed_hash = hash_bytes.get_hash(ClientHelloHashTypes::JA3);
        //assert_eq!(computed_hash, expected_hash);

        //S2N_BLOB_FROM_HEX(expected_hash, "839bbe3ed07fed922ded5aaf714d6842");
    }

    #[test]
    fn another_valid() {
        let raw_client_hello = vec![
            0x01, 0x00, 0x01, 0xFC,
            0x03, 0x03, 0xf4, 0x0f, 0xfd, 0xee, 0xc7, 0x27, 0xc2, 0x1e, 0x32,
            0x70, 0x5f, 0x85, 0x25, 0xa6, 0xbb, 0x6c, 0xca, 0x4b, 0x6c, 0xbe,
            0x01, 0x66, 0x32, 0x66, 0x76, 0x4b, 0x67, 0x74, 0x3b, 0x91, 0xbd,
            0xb2, 0x20, 0x83, 0xd4, 0x9e, 0x77, 0xaf, 0xc1, 0x5a, 0x63, 0x35,
            0xba, 0x2f, 0xe9, 0x76, 0xbe, 0x9a, 0x42, 0x6b, 0x2e, 0xb5, 0x58,
            0x23, 0x84, 0x2a, 0x99, 0x2b, 0x37, 0x88, 0xd1, 0xf7, 0x9d, 0xd6,
            0x20, 0x00, 0x9c, 0x13, 0x02, 0x13, 0x03, 0x13, 0x01, 0xc0, 0x2c,
            0xc0, 0x30, 0x00, 0xa3, 0x00, 0x9f, 0xcc, 0xa9, 0xcc, 0xa8, 0xcc,
            0xaa, 0xc0, 0xaf, 0xc0, 0xad, 0xc0, 0xa3, 0xc0, 0x9f, 0xc0, 0x5d,
            0xc0, 0x61, 0xc0, 0x57, 0xc0, 0x53, 0xc0, 0x24, 0xc0, 0x28, 0x00,
            0x6b, 0x00, 0x6a, 0xc0, 0x73, 0xc0, 0x77, 0x00, 0xc4, 0x00, 0xc3,
            0xc0, 0x0a, 0xc0, 0x14, 0x00, 0x39, 0x00, 0x38, 0x00, 0x88, 0x00,
            0x87, 0x00, 0x9d, 0xc0, 0xa1, 0xc0, 0x9d, 0xc0, 0x51, 0x00, 0x3d,
            0x00, 0xc0, 0x00, 0x35, 0x00, 0x84, 0xc0, 0x2b, 0xc0, 0x2f, 0x00,
            0xa2, 0x00, 0x9e, 0xc0, 0xae, 0xc0, 0xac, 0xc0, 0xa2, 0xc0, 0x9e,
            0xc0, 0x5c, 0xc0, 0x60, 0xc0, 0x56, 0xc0, 0x52, 0xc0, 0x23, 0xc0,
            0x27, 0x00, 0x67, 0x00, 0x40, 0xc0, 0x72, 0xc0, 0x76, 0x00, 0xbe,
            0x00, 0xbd, 0xc0, 0x09, 0xc0, 0x13, 0x00, 0x33, 0x00, 0x32, 0x00,
            0x9a, 0x00, 0x99, 0x00, 0x45, 0x00, 0x44, 0x00, 0x9c, 0xc0, 0xa0,
            0xc0, 0x9c, 0xc0, 0x50, 0x00, 0x3c, 0x00, 0xba, 0x00, 0x2f, 0x00,
            0x96, 0x00, 0x41, 0x00, 0xff, 0x01, 0x00, 0x01, 0x17, 0x00, 0x00,
            0x00, 0x0e, 0x00, 0x0c, 0x00, 0x00, 0x09, 0x31, 0x32, 0x37, 0x2e,
            0x30, 0x2e, 0x30, 0x2e, 0x31, 0x00, 0x0b, 0x00, 0x04, 0x03, 0x00,
            0x01, 0x02, 0x00, 0x0a, 0x00, 0x0c, 0x00, 0x0a, 0x00, 0x1d, 0x00,
            0x17, 0x00, 0x1e, 0x00, 0x19, 0x00, 0x18, 0x00, 0x23, 0x00, 0x00,
            0x00, 0x16, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x0d, 0x00,
            0x30, 0x00, 0x2e, 0x04, 0x03, 0x05, 0x03, 0x06, 0x03, 0x08, 0x07,
            0x08, 0x08, 0x08, 0x09, 0x08, 0x0a, 0x08, 0x0b, 0x08, 0x04, 0x08,
            0x05, 0x08, 0x06, 0x04, 0x01, 0x05, 0x01, 0x06, 0x01, 0x03, 0x03,
            0x02, 0x03, 0x03, 0x01, 0x02, 0x01, 0x03, 0x02, 0x02, 0x02, 0x04,
            0x02, 0x05, 0x02, 0x06, 0x02, 0x00, 0x2b, 0x00, 0x09, 0x08, 0x03,
            0x04, 0x03, 0x03, 0x03, 0x02, 0x03, 0x01, 0x00, 0x2d, 0x00, 0x02,
            0x01, 0x01, 0x00, 0x33, 0x00, 0x26, 0x00, 0x24, 0x00, 0x1d, 0x00,
            0x20, 0x29, 0x61, 0x96, 0xc4, 0x0c, 0x16, 0x7c, 0xde, 0x20, 0x01,
            0x86, 0x32, 0xdf, 0x84, 0x2f, 0x67, 0x2f, 0x3f, 0x64, 0x17, 0xc0,
            0x2e, 0xa2, 0xb2, 0x9e, 0xfc, 0xa8, 0xb0, 0xc5, 0x71, 0x6e, 0x7d,
            0x00, 0x15, 0x00, 0x6c
        ];
        let mut raw_client_512 = vec![0; 512];
        for (i, v) in raw_client_hello.iter().enumerate() {
            raw_client_512[i] = *v;
        }
        crate::init::init();
        // why does this one fail
        assert_eq!(raw_client_hello.len(), 512);
        assert!(raw_client_hello.len() < raw_client_512.len());
        ClientHello::parse_client_hello(raw_client_512.as_slice()).unwrap();
        ClientHello::parse_client_hello(raw_client_hello.as_slice()).unwrap();
    }

    #[test]
    fn accurate_array() {
        let raw_client_hello = vec![
            0x01, 0x00, 0x00, 0xFE, 0x03, 0x03, 0x54, 0x3D, 0xD3, 0x28, 0x32, 0x83, 0x69, 0x2D,
            0x85, 0xF9, 0x41, 0x6B, 0x5C, 0xCC, 0x65, 0xD2, 0xAA, 0xFC, 0xA4, 0x5C, 0x65, 0x30,
            0xB3, 0xC6, 0xEA, 0xFB, 0xF6, 0xD3, 0x71, 0xB6, 0xA0, 0x15, 0x00, 0x00, 0x94, 0xC0,
            0x30, 0xC0, 0x2C, 0xC0, 0x28, 0xC0, 0x24, 0xC0, 0x14, 0xC0, 0x0A, 0x00, 0xA3, 0x00,
            0x9F, 0x00, 0x6B, 0x00, 0x6A, 0x00, 0x39, 0x00, 0x38, 0x00, 0x88, 0x00, 0x87, 0xC0,
            0x32, 0xC0, 0x2E, 0xC0, 0x2A, 0xC0, 0x26, 0xC0, 0x0F, 0xC0, 0x05, 0x00, 0x9D, 0x00,
            0x3D, 0x00, 0x35, 0x00, 0x84, 0xC0, 0x12, 0xC0, 0x08, 0x00, 0x16, 0x00, 0x13, 0xC0,
            0x0D, 0xC0, 0x03, 0x00, 0x0A, 0xC0, 0x2F, 0xC0, 0x2B, 0xC0, 0x27, 0xC0, 0x23, 0xC0,
            0x13, 0xC0, 0x09, 0x00, 0xA2, 0x00, 0x9E, 0x00, 0x67, 0x00, 0x40, 0x00, 0x33, 0x00,
            0x32, 0x00, 0x9A, 0x00, 0x99, 0x00, 0x45, 0x00, 0x44, 0xC0, 0x31, 0xC0, 0x2D, 0xC0,
            0x29, 0xC0, 0x25, 0xC0, 0x0E, 0xC0, 0x04, 0x00, 0x9C, 0x00, 0x3C, 0x00, 0x2F, 0x00,
            0x96, 0x00, 0x41, 0x00, 0x07, 0xC0, 0x11, 0xC0, 0x07, 0xC0, 0x0C, 0xC0, 0x02, 0x00,
            0x05, 0x00, 0x04, 0x00, 0x15, 0x00, 0x12, 0x00, 0x09, 0x00, 0x14, 0x00, 0x11, 0x00,
            0x08, 0x00, 0x06, 0x00, 0x03, 0x00, 0xFF, 0x01, 0x00, 0x00, 0x41, 0x00, 0x0B, 0x00,
            0x04, 0x03, 0x00, 0x01, 0x02, 0x00, 0x0A, 0x00, 0x06, 0x00, 0x04, 0x00, 0x18, 0x00,
            0x17, 0x00, 0x23, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x22, 0x00, 0x20, 0x06, 0x01, 0x06,
            0x02, 0x06, 0x03, 0x05, 0x01, 0x05, 0x02, 0x05, 0x03, 0x04, 0x01, 0x04, 0x02, 0x04,
            0x03, 0x03, 0x01, 0x03, 0x02, 0x03, 0x03, 0x02, 0x01, 0x02, 0x02, 0x02, 0x03, 0x01,
            0x01, 0x00, 0x0F, 0x00, 0x01, 0x01,
        ];
        crate::init::init();
        let hash_bytes = ClientHello::parse_client_hello(raw_client_hello.as_slice()).unwrap();
    }
}
