import "DRBG.cry";

let blocksize = 16; // blocklen / 8
let keysize = 16; // keylen / 8
let seedsize = 32;

let {{

fake_entropy : [seedsize*8]
fake_entropy = undefined

}};

let aes_128_ecb_spec = do {
    llvm_return_arbitrary;
    llvm_no_simulate;
};

let cipher_new_spec = do {
    llvm_ptr "return" (llvm_struct "struct.evp_cipher_ctx_st");       // ctx
    llvm_ptr "return->11" (llvm_array keysize (llvm_int 8));          // key
    llvm_allocates "return";
    llvm_allocates "return->11";
    llvm_no_simulate;
};

let cipher_init_spec = do {
    llvm_ptr "args[0]" (llvm_struct "struct.evp_cipher_ctx_st");      // ctx
    llvm_no_simulate;
};

let cipher_free_spec = do {
    llvm_ptr "args[0]" (llvm_struct "struct.evp_cipher_ctx_st");      // ctx
    llvm_no_simulate;
};

let cipher_cleanup_spec = do {
    llvm_ptr "args[0]" (llvm_struct "struct.evp_cipher_ctx_st");      // ctx
    llvm_ptr "args[0]->11" (llvm_array keysize (llvm_int 8));
    llvm_var "*(args[0]->11)" (llvm_array keysize (llvm_int 8));
    llvm_ensure_eq "*(args[0]->11)" {{ zero : [keysize][8] }};
    llvm_return {{ 1 : [32] }};
    llvm_no_simulate;
};

let encryptInit_spec = do {
    llvm_ptr "args[0]" (llvm_struct "struct.evp_cipher_ctx_st");      // ctx
    llvm_ptr "args[3]" (llvm_array keysize (llvm_int 8));             // key
    key <- llvm_var "*(args[3])" (llvm_array keysize (llvm_int 8));   // *key
    llvm_ptr "args[0]->11" (llvm_array keysize (llvm_int 8));
    llvm_var "*(args[0]->11)" (llvm_array keysize (llvm_int 8));
    llvm_ensure_eq "*(args[0]->11)" key;
    llvm_return {{ 1 : [32] }};
    llvm_no_simulate;
};

let encryptUpdate_spec n = do {
    llvm_ptr "args[0]" (llvm_struct "struct.evp_cipher_ctx_st");        // ctx
    llvm_ptr "args[1]" (llvm_array n (llvm_int 8));                     // out
    llvm_var "*(args[1])" (llvm_array n (llvm_int 8));                  // *out
    llvm_ptr "args[2]" (llvm_int 32);                                   // outl
    llvm_var "*(args[2])" (llvm_int 32);                                // *outl
    llvm_ptr "args[3]" (llvm_array n (llvm_int 8));                     // in
    msg <- llvm_var "*(args[3])" (llvm_array n (llvm_int 8));           // *in
    llvm_var "args[4]" (llvm_int 32);                                   // inl
    llvm_ptr "args[0]->11" (llvm_array keysize (llvm_int 8));           // key
    key <- llvm_var "*(args[0]->11)" (llvm_array keysize (llvm_int 8)); // *key
    llvm_assert_eq "args[4]" {{ `n : [32] }};
    llvm_ensure_eq "*(args[1])" {{ split (block_encrypt (join key) (join msg)) : [blocksize][8] }};
    llvm_ensure_eq "*(args[2])" {{ `n : [32] }};
    llvm_ensure_eq "*(args[3])" {{ msg }};
    llvm_return {{ 1 : [32] }};
    llvm_no_simulate;
};

let drbg_state n = do {
    llvm_ptr n (llvm_struct "struct.s2n_drbg");
    bytes_used <- llvm_var (str_concat n "->0") (llvm_int 64);
    // NB: several proofs fail without the following assertion. I would
    // have expected it to be `reseed_limit`, not `reseed_limit / 2`.
    llvm_assert {{ bytes_used < (`reseed_limit / 2 : [64]) }};
    llvm_ptr (str_concat n "->1") (llvm_struct "struct.evp_cipher_ctx_st");
    llvm_ptr (str_concat "(" (str_concat n "->1)->11")) (llvm_array keysize (llvm_int 8));
    key <- llvm_var (str_concat "*((" (str_concat n "->1)->11)")) (llvm_array keysize (llvm_int 8));
    v <- llvm_var (str_concat n "->2") (llvm_array blocksize (llvm_int 8));
    llvm_ptr (str_concat n "->3") (llvm_array 0 (llvm_int 8));
    llvm_assert_null (str_concat n "->3");
    llvm_var (str_concat n "->4") (llvm_int 32);
    return {{ { bytes_used = bytes_used
              , ctx = { key = join key }
              , v = join v
              } }};
};

let ensure_drbg_state n s = do {
    llvm_ensure_eq (str_concat n "->0") {{ s.bytes_used }};
    llvm_ensure_eq_post (str_concat "*((" (str_concat n "->1)->11)")) {{
        split s.ctx.key : [keysize][8]
    }};
    llvm_ensure_eq (str_concat n "->2") {{ split s.v : [blocksize][8] }};
};

let block_encrypt_spec = do {
    llvm_ptr "ctx" (llvm_struct "struct.evp_cipher_ctx_st");        // ctx
    llvm_ptr "ctx->11" (llvm_array keysize (llvm_int 8));           // key
    key <- llvm_var "*(ctx->11)" (llvm_array keysize (llvm_int 8)); // *key
    llvm_ptr "in" (llvm_array blocksize (llvm_int 8));
    msg <- llvm_var "*in" (llvm_array blocksize (llvm_int 8));
    llvm_ptr "out" (llvm_array blocksize (llvm_int 8));
    out <- llvm_var "*out" (llvm_array blocksize (llvm_int 8));
    llvm_ensure_eq "*out" {{ split (block_encrypt (join key) (join msg)) : [blocksize][8] }};
    llvm_return {{ 0 : [32] }};
    llvm_verify_tactic abc;
};

let get_urandom_spec = do {
    llvm_ptr "args[0]" (llvm_struct "struct.s2n_blob");
    sz <- llvm_var "args[0]->1" (llvm_int 32);
    llvm_ptr "args[0]->0" (llvm_array seedsize (llvm_int 8));
    llvm_var "*(args[0]->0)" (llvm_array seedsize (llvm_int 8));
    llvm_assert_eq "args[0]->1" {{ `seedsize : [32] }};
    llvm_ensure_eq "*(args[0]->0)" {{ split fake_entropy : [seedsize][8] }};
    llvm_return {{ 0 : [32] }};
    llvm_no_simulate;
};

let supports_rdrand_spec = do {
    llvm_return_arbitrary;
    llvm_no_simulate;
};

let blob_zero_spec n = do {
    llvm_ptr "args[0]" (llvm_struct "struct.s2n_blob");
    sz <- llvm_var "args[0]->1" (llvm_int 32);
    llvm_ptr "args[0]->0" (llvm_array n (llvm_int 8));
    llvm_var "*(args[0]->0)" (llvm_array n (llvm_int 8));
    llvm_assert_eq "args[0]->1" {{ `n : [32] }};
    llvm_ensure_eq "*(args[0]->0)" {{ zero : [n][8] }};
    llvm_return {{ 0 : [32] }};
    llvm_no_simulate;
};

let increment_sequence_number_spec = do {
    llvm_ptr "args[0]" (llvm_struct "struct.s2n_blob");
    llvm_var "args[0]->1" (llvm_int 32);
    llvm_ptr "args[0]->0" (llvm_array blocksize (llvm_int 8));
    v <- llvm_var "*(args[0]->0)" (llvm_array blocksize (llvm_int 8));
    llvm_assert_eq "args[0]->1" {{ `blocksize : [32] }};
    llvm_ensure_eq "*(args[0]->0)" {{ split ((join v) + 1) : [blocksize][8] }};
    llvm_return {{ 0 : [32] }};
    llvm_sat_branches true;
    llvm_verify_tactic abc;
};

let bits_spec n = do {
    s <- drbg_state "drbg";
    llvm_ptr "out" (llvm_struct "struct.s2n_blob");
    sz <- llvm_var "out->1" (llvm_int 32);
    llvm_ptr "out->0" (llvm_array n (llvm_int 8));
    data <- llvm_var "*(out->0)" (llvm_array n (llvm_int 8));
    llvm_assert_eq "out->1" {{ `n : [32] }};
    let res = {{ drbg_generate_internal `{n=n*8} s }};
    llvm_ensure_eq "*(out->0)" {{ split res.0 : [n][8] }};
    ensure_drbg_state "drbg" {{ res.1 }};
    llvm_return {{ 0 : [32] }};
    llvm_sat_branches true;
    llvm_verify_tactic (unint_z3 ["block_encrypt"]);
};

let update_spec n = do {
    s <- drbg_state "drbg";
    llvm_ptr "provided_data" (llvm_struct "struct.s2n_blob");
    sz <- llvm_var "provided_data->1" (llvm_int 32);
    llvm_ptr "provided_data->0" (llvm_array n (llvm_int 8));
    data <- llvm_var "*(provided_data->0)" (llvm_array n (llvm_int 8));
    llvm_assert_eq "provided_data->1" {{ `n : [32] }};
    ensure_drbg_state "drbg" {{ drbg_update (join data) s }};
    llvm_return {{ 0 : [32] }};
    llvm_sat_branches true;
    llvm_simplify_addrs true;
    llvm_verify_tactic (unint_z3 ["block_encrypt"]);
};

let seed_spec n = do {
    s <- drbg_state "drbg";
    llvm_ptr "ps" (llvm_struct "struct.s2n_blob");
    sz <- llvm_var "ps->1" (llvm_int 32);
    llvm_ptr "ps->0" (llvm_array n (llvm_int 8));
    data <- llvm_var "*(ps->0)" (llvm_array n (llvm_int 8));
    llvm_assert_eq "ps->1" {{ `n : [32] }};
    ensure_drbg_state "drbg" {{ drbg_reseed s fake_entropy (join data) }};
    llvm_return {{ 0 : [32] }};
    llvm_sat_branches true;
    llvm_verify_tactic (unint_z3 ["block_encrypt", "fake_entropy"]);
};

let instantiate_spec n = do {
    s <- drbg_state "drbg";
    llvm_ptr "personalization_string" (llvm_struct "struct.s2n_blob");
    sz <- llvm_var "personalization_string->1" (llvm_int 32);
    llvm_ptr "personalization_string->0" (llvm_array n (llvm_int 8));
    str <- llvm_var "*(personalization_string->0)" (llvm_array n (llvm_int 8));
    llvm_assert_eq "personalization_string->1" {{ `n : [32] }};
    llvm_allocates "drbg->1";
    llvm_allocates "(drbg->1)->11";
    ensure_drbg_state "drbg" {{ drbg_instantiate fake_entropy (join str) }};
    llvm_return {{ 0 : [32] }};
    llvm_sat_branches true;
    llvm_verify_tactic do { unint_z3 ["block_encrypt", "fake_entropy"]; };
};

let generate_spec n = do {
    s <- drbg_state "drbg";
    llvm_ptr "blob" (llvm_struct "struct.s2n_blob");
    sz <- llvm_var "blob->1" (llvm_int 32);
    llvm_ptr "blob->0" (llvm_array n (llvm_int 8));
    data <- llvm_var "*(blob->0)" (llvm_array n (llvm_int 8));
    llvm_assert_eq "blob->1" {{ `n : [32] }};
    llvm_assert {{ s.bytes_used < (`reseed_limit / 4 : [64]) }}; // TODO
    let res = {{ drbg_generate `{n=seedlen} s fake_entropy False }};
    llvm_ensure_eq "*(blob->0)" {{ split res.0 : [seedsize][8] }};
    ensure_drbg_state "drbg" {{ res.1 }};
    llvm_return {{ 0 : [32] }};
    llvm_verify_tactic (unint_z3 ["block_encrypt", "fake_entropy"]);
};

let wipe_spec = do {
    s <- drbg_state "drbg";
    llvm_ensure_eq "drbg->2" {{ zero : [blocksize][8] }};
    llvm_return {{ 0 : [32] }};
    llvm_verify_tactic abc;
};

let bytes_used_spec = do {
    s <- drbg_state "drbg";
    llvm_return {{ drop s.bytes_used : [32] }};
    llvm_verify_tactic abc;
};

m <- llvm_load_module "../../bitcode/all_llvm.bc";

aes_128_ecb_ov <- llvm_verify m "EVP_aes_128_ecb" [] aes_128_ecb_spec;

cipher_new_ov <- llvm_verify m "EVP_CIPHER_CTX_new" [] cipher_new_spec;

// Usually inlined.
//cipher_init_ov <- llvm_verify m "EVP_CIPHER_CTX_init" [] cipher_init_spec;

// Usually inlined.
//cipher_cleanup_ov <- llvm_verify m "EVP_CIPHER_CTX_cleanup" [] cipher_cleanup_spec;

cipher_reset_ov <- llvm_verify m "EVP_CIPHER_CTX_reset" [] cipher_cleanup_spec;

cipher_free_ov <- llvm_verify m "EVP_CIPHER_CTX_free" [] cipher_free_spec;

encryptInit_ov <- llvm_verify m "EVP_EncryptInit_ex"
    []
    encryptInit_spec;

encryptUpdate_ov <- llvm_verify m "EVP_EncryptUpdate"
    []
    (encryptUpdate_spec 16);

zero_ov_block <- llvm_verify m "s2n_blob_zero" [] (blob_zero_spec blocksize);
zero_ov_seed <- llvm_verify m "s2n_blob_zero" [] (blob_zero_spec seedsize);
zero_ov_drbg <- llvm_verify m "s2n_blob_zero" [] (blob_zero_spec 48);

supports_rdrand_ov <- llvm_verify m "s2n_cpu_supports_rdrand" [] supports_rdrand_spec;

get_urandom_ov <- llvm_verify m "s2n_get_urandom_data" [] get_urandom_spec;

inc_ov <- llvm_verify m "s2n_increment_sequence_number" [] increment_sequence_number_spec;

// Usually inlined.
//blk_enc_ov <- llvm_verify m "s2n_drbg_block_encrypt" [encryptUpdate_ov] block_encrypt_spec;

bits_ov <- llvm_verify m "s2n_drbg_bits" [inc_ov, encryptUpdate_ov /* blk_enc_ov*/ ] (bits_spec seedsize);

update_ov <- llvm_verify m "s2n_drbg_update" [bits_ov, encryptInit_ov, aes_128_ecb_ov] (update_spec seedsize);

seed_ov <- llvm_verify m "s2n_drbg_seed" [get_urandom_ov, update_ov] (seed_spec seedsize);

instantiate_ov <- llvm_verify m "s2n_drbg_instantiate" [zero_ov_block, zero_ov_seed, cipher_new_ov, /*cipher_init_ov,*/ cipher_reset_ov, encryptInit_ov, aes_128_ecb_ov, seed_ov, supports_rdrand_ov] (instantiate_spec seedsize);

generate_ov <- llvm_verify m "s2n_drbg_generate" [seed_ov, bits_ov, update_ov] (generate_spec seedsize);

llvm_verify m "s2n_drbg_wipe" [cipher_reset_ov, cipher_free_ov, zero_ov_drbg] wipe_spec;

llvm_verify m "s2n_drbg_bytes_used" [] bytes_used_spec;
