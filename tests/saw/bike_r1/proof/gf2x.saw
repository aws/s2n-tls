// gf2x.saw Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

///////////////////////////////////////////////////////////////////////////////
// Specifications

let gf2x_add_spec = do {
  res_ptr <- out_ref rsize_t;
  (_, a_ptr) <- in_ref rsize_t "a";
  (_, b_ptr) <- in_ref rsize_t "b";
  crucible_execute_func [res_ptr, a_ptr, b_ptr, tm {{ `R_SIZE:[64] }}];
  _ <- point_to rsize_t res_ptr "res";
  crucible_return (tm {{ fromInteger`{[32]} SUCCESS }});
};

let gf2x_add_left_spec = do {
  (_, a_ptr) <- inout_ref rsize_t "a";
  (_, b_ptr) <- in_ref rsize_t "b";
  crucible_execute_func [a_ptr, a_ptr, b_ptr, tm {{ `R_SIZE:[64] }}];
  _ <- point_to rsize_t a_ptr "a'";
  crucible_return (tm {{ fromInteger`{[32]} SUCCESS }});
};

// NOTE: A comment in the C says that gf2x_mod_mul "requires the values to
//       be 64bit padded and extra (dbl) space for the results" but the
//       actual code does not seem to need that.  Maybe one of the
//       alternative implementations does?  In any case, we specify here
//       that the result parameter must have this extra space.
let gf2x_mod_mul_spec = do {
  res_ptr <- out_ref (i64_array_t (eval_int {{ 2 * (`R_PADDED_QW:[64]) }}));
  (_, a_ptr) <- in_ref (i64_array_t R_PADDED_QW) "a";
  (_, b_ptr) <- in_ref (i64_array_t R_PADDED_QW) "b";
  crucible_execute_func [res_ptr, a_ptr, b_ptr];
  res <- crucible_fresh_var "res" rsize_t;
  crucible_points_to_untyped res_ptr (tm res);
  crucible_return (tm {{ fromInteger`{[32]} SUCCESS }});
};

let gf2x_mul_1x1_spec = do {
  c_ptr <- out_ref (i64_array_t 2);
  a <- crucible_fresh_var "a" i64;
  b <- crucible_fresh_var "b" i64;
  crucible_execute_func [c_ptr, tm a, tm b];
  _ <- point_to (i64_array_t 2) c_ptr "c";
  return ();
};


///////////////////////////////////////////////////////////////////////////////
// Proof commands

gf2x_add_ov <- verify gf2x_add_fun_name [] gf2x_add_spec;
gf2x_add_left_ov <- verify gf2x_add_fun_name [] gf2x_add_left_spec;

gf2x_mul_1x1_ov <- verify gf2x_mul_1x1_fun_name [] gf2x_mul_1x1_spec;

gf2x_mod_mul_ov <- verify gf2x_mod_mul_fun_name
  [gf2x_mul_1x1_ov]
  gf2x_mod_mul_spec;

