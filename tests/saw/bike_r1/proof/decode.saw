// decode.saw Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0


///////////////////////////////////////////////////////////////////////////////
// Specifications

let get_threshold_spec = do {
  (_, s_ptr) <- in_ref_aligned 64 syndrome_t "s";
  crucible_execute_func [s_ptr];
  threshold <- crucible_fresh_var "threshold" i8;
  crucible_return (tm threshold);
};

let dup_spec = do {
  (_, syndrome_ptr) <- inout_ref_aligned 64 syndrome_t "syndrome";
  crucible_execute_func [syndrome_ptr];
  _ <- point_to syndrome_t syndrome_ptr "syndrome";
  return ();
};

let compute_syndrome_spec = do {
  (_, syndrome_ptr) <- inout_ref_aligned 64 syndrome_t "syndrome";
  (_, ct_ptr) <- in_ref ct_t "ct";
  (_, sk_ptr) <- in_ref sk_t "sk";
  crucible_execute_func [syndrome_ptr, ct_ptr, sk_ptr];
  _ <- point_to syndrome_t syndrome_ptr "syndrome'";
  crucible_return (tm {{ fromInteger`{[32]} SUCCESS }});
};

let bit_sliced_adder_spec = do {
  (_, upc_ptr) <- inout_ref (llvm_array SLICES padded_r_t) "upc";
  (_, rotated_syndrome_ptr) <- inout_ref_aligned 64 syndrome_t "rotated_syndrome";
  num_of_slices <- crucible_fresh_var "num_of_slices" i64;
  crucible_precond {{ num_of_slices <= `SLICES }};
  crucible_execute_func [upc_ptr, rotated_syndrome_ptr, tm num_of_slices];
  _ <- point_to (llvm_array SLICES padded_r_t) upc_ptr "upc'";
  _ <- point_to syndrome_t rotated_syndrome_ptr "rotated_syndrome'";
  return ();
};

let bit_slice_full_subtract_spec = do {
  (_, upc_ptr) <- inout_ref (llvm_array SLICES padded_r_t) "upc";
  val <- crucible_fresh_var "val" i8;
  crucible_execute_func [upc_ptr, tm val];
  _ <- point_to (llvm_array SLICES padded_r_t) upc_ptr "upc'";
  return ();
};

let find_err1_spec = do {
  (_, e_ptr) <- inout_ref split_e_t "e";
  black_e_ptr <- out_ref split_e_t;
  gray_e_ptr <- out_ref split_e_t;
  (_, syndrome_ptr) <- in_ref_aligned 64 syndrome_t "syndrome";
  (_, wlist_ptr) <- in_ref compressed_idx_dv_ar_t "wlist";
  threshold <- crucible_fresh_var "threshold" i8;
  crucible_execute_func [e_ptr, black_e_ptr, gray_e_ptr, syndrome_ptr, wlist_ptr, tm threshold];
  _ <- point_to split_e_t e_ptr "e'";
  _ <- point_to split_e_t black_e_ptr "black_e";
  _ <- point_to split_e_t gray_e_ptr "gray_e";
  return ();
};

let find_err2_spec = do {
  (_, e_ptr) <- inout_ref split_e_t "e";
  (_, pos_e_ptr) <- in_ref split_e_t "pos_e";
  (_, syndrome_ptr) <- in_ref_aligned 64 syndrome_t "syndrome";
  (_, wlist_ptr) <- in_ref compressed_idx_dv_ar_t "wlist";
  threshold <- crucible_fresh_var "threshold" i8;
  crucible_execute_func [e_ptr, pos_e_ptr, syndrome_ptr, wlist_ptr, tm threshold];
  _ <- point_to split_e_t e_ptr "e'";
  return ();
};

let decode_spec = do {
  e_ptr <- out_ref split_e_t ;
  (original_s, original_s_ptr) <- in_ref_aligned 64 syndrome_t "original_s";
  (ct, ct_ptr) <- in_ref ct_t "ct";
  (sk, sk_ptr) <- in_ref_aligned 8 sk_t "sk";
  crucible_alloc_global bike_errno_glob_name;
  _bike_errno <- point_to i32 (crucible_global bike_errno_glob_name) "bike_errno";

  crucible_execute_func [e_ptr, original_s_ptr, ct_ptr, sk_ptr];

  e' <- point_to split_e_t e_ptr "e'";
  _bike_errno' <- point_to i32 (crucible_global bike_errno_glob_name) "bike_errno'";

  res <- crucible_fresh_var "res" i32;
  crucible_return (tm res);
};


///////////////////////////////////////////////////////////////////////////////
// Proof commands

// NOTE: This proof is not possible with the current floating point
//       suport in SAW
get_threshold_ov <- admit "get_threshold" []
  get_threshold_spec;

dup_ov <- verify "dup" [] dup_spec;

compute_syndrome_ov <- verify compute_syndrome_fun_name
  [ gf2x_mod_mul_ov
  , gf2x_add_left_ov
  , dup_ov
  ]
  compute_syndrome_spec;

enable_crucible_assert_then_assume;
bit_sliced_adder_ov <- verify_pathsat "bit_sliced_adder" []
  bit_sliced_adder_spec;
disable_crucible_assert_then_assume;

bit_slice_full_subtract_ov <- verify "bit_slice_full_subtract" []
  bit_slice_full_subtract_spec;

find_err1_ov <- verify "find_err1"
  [ rotate_right_ov
  , bit_sliced_adder_ov
  , bit_slice_full_subtract_ov
  ]
  find_err1_spec;

find_err2_ov <- verify "find_err2"
  [ rotate_right_ov
  , bit_sliced_adder_ov
  , bit_slice_full_subtract_ov
  ]
  find_err2_spec;

decode_ov <- verify decode_fun_name
  [ dup_ov
  , get_threshold_ov
  , find_err1_ov
  , find_err2_ov
  , compute_syndrome_ov
  ]
  decode_spec;

