// types.saw Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0


///////////////////////////////////////////////////////////////////////////////
// BIKE-specific types
// Arrays of integers
let i8_array_t n = llvm_array n (llvm_int 8);
let i32_array_t n = llvm_array n (llvm_int 32);
let i64_array_t n = llvm_array n (llvm_int 64);

let rsize_t = i8_array_t R_SIZE;

///////////////////////////////////////////////////////////////////////////////
// Types involving structures
let uint128_t = llvm_struct "struct.uint128_s";

let seed_t = llvm_struct "struct.seed_s";

let r_t = llvm_struct "struct.r_s";

let e_t = llvm_struct "struct.e_s";

let generic_param_n_t = llvm_struct "struct.generic_param_n_s";

let ct_t = generic_param_n_t;
let pk_t = generic_param_n_t;
let split_e_t = generic_param_n_t;
let char_ct_t = ct_t;
let char_pk_t = pk_t;

let idx_t = i32;
let idx_array_t n = llvm_array n idx_t;

let compressed_idx_dv_ar_t = llvm_array N0 (llvm_struct "struct.compressed_idx_dv_s");

let char_sk_t = i8_array_t (eval_int {{ `(N0 * R_SIZE + N0 * DV * 4) : [64] }});
let sk_t = char_sk_t;

let padded_r_t = llvm_struct "struct.padded_r_s";

let char_ss_t = i8_array_t ELL_K_SIZE;

let syndrome_t = llvm_struct "struct.syndrome_s";

let evp_cipher_ctx_st_t = llvm_struct "struct.evp_cipher_ctx_st";
let evp_cipher_st_t = llvm_struct "struct.evp_cipher_st";

// NOTE: pointer to a struct!
let aes256_ks_t = llvm_type "%struct.evp_cipher_ctx_st*";

// "struct.aes256_key_s" has the same layout as "struct.seed_s";
let aes256_key_t = seed_t;

let aes_ctr_prf_state_t = llvm_struct "struct.aes_ctr_prf_state_s";

let points_to_fresh_aes_ctr_prf_state ptr ks_ptr name = do {
  _ <- point_to uint128_t (crucible_elem ptr 0) (str_concat name ".ctr");
  _ <- point_to uint128_t (crucible_elem ptr 1) (str_concat name ".buffer");
  crucible_points_to (crucible_elem ptr 2) ks_ptr;
  _ <- point_to evp_cipher_ctx_st_t ks_ptr (str_concat name ".ks");
  rem_invokations <- point_to i32 (crucible_elem ptr 3) (str_concat name ".rem_invokations");
  pos <- point_to i8 (crucible_elem ptr 4) (str_concat name ".pos");
  return {{ {rem_invokations=rem_invokations, pos=pos} }};
};

let ptr_to_fresh_aes_ctr_prf_state name = do {
  ptr <- crucible_alloc aes_ctr_prf_state_t;
  ks_ptr <- crucible_alloc evp_cipher_ctx_st_t;
  s <- points_to_fresh_aes_ctr_prf_state ptr ks_ptr name;
  return (s, ptr, ks_ptr);
};

let sha384_hash_t = i8_array_t SHA384_HASH_SIZE;

