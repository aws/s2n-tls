// converts_portable.saw Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

///////////////////////////////////////////////////////////////////////////////
// Specifications

// NOTE: This is the provable spec that corresponds to what the code does.
let convert_to_redundant_rep_spec len = do {
    let len_div_8 = eval_int {{ 1+(`len:[64])/8 }};
    (out,outp) <- ptr_to_fresh "out" (llvm_array len (llvm_int 8));
    (i,inp) <- ptr_to_fresh_readonly "in" (llvm_array len_div_8 (llvm_int 8));
    crucible_execute_func [outp, inp, tm {{ `len:[64] }}];
    crucible_points_to outp (tm {{ out || convert_to_redundant_rep `{len} i }});
    return();
};

// NOTE: This is the specification this function should satisfy. We
//       admit its proof for now, to faciliate verifying the rest of
//       the program.
let convert_to_redundant_rep_spec' len = do {
    let len_div_8 = eval_int {{ (1+(`len:[64])/8) }};
    (out,outp) <- ptr_to_fresh "out" (llvm_array len (llvm_int 8));
    crucible_precond {{ out == zero }};
    (i,inp) <- ptr_to_fresh_readonly "in" (llvm_array len_div_8 (llvm_int 8));
    crucible_execute_func [outp, inp, tm {{ `len:[64] }}];
    crucible_points_to outp (tm {{ convert_to_redundant_rep `{len} i }});
    return();
};

// NOTE: n corresponds to different input lengths
let count_ones_spec n = do {
    let ty = (make_i8_T n);
    (a, ap) <- in_ref ty "in";
    crucible_execute_func [ap, tm {{ `n:[32] }} ];
    crucible_return (tm {{count_ones`{n} a}});
};

///////////////////////////////////////////////////////////////////////////////
// Proof commands

// NOTE: This is only every used for len==RBITS, the proof
//       takes ~3 minutes on the full sizes
verify "convert_to_redundant_rep" [] (convert_to_redundant_rep_spec R_BITS);

convert_to_redundant_rep_ov <- verify "convert_to_redundant_rep" []
    (convert_to_redundant_rep_spec' R_BITS);

// NOTE: Overrides for various needed lengths needed in the program
//       Only RBITS=10163, R_SIZE=1271, and N_SIZE=2541 appear in the
//       bitcode file. With the toy parameter size,
//       RBITS=163, R_SIZE=21 and N_SIZE=41 appear

// NOTE: Proof times out without preprocessing with a rewrite rule.
// Sign-extending a 32-bit popcount is the same as doing a 64-bit
// popcount on a zero-extended value.

count_ones_simp <-
  prove_core abc
  "(x : bitvector 32) -> EqTrue (bvEq 64 (bvSExt 32 31 (bvPopcount 32 x)) (bvPopcount 64 (bvUExt 32 32 x)))";

let count_ones_tac = simplify (addsimp count_ones_simp empty_ss);

count_ones_R_SIZE_ov <- verify_simps "count_ones" [] [] (count_ones_spec R_SIZE) count_ones_tac;
count_ones_N_SIZE_ov <- verify_simps "count_ones" [] [] (count_ones_spec N_SIZE) count_ones_tac;
count_ones_R_BITS_ov <- admit "count_ones" [] (count_ones_spec R_BITS);
