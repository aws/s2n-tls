// openssl_library.saw Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0


///////////////////////////////////////////////////////////////////////////////
// Specifications

// EVP specs
let EVP_CIPHER_CTX_new_spec = do {
  crucible_execute_func [];
  (_, ctx_ptr) <- inout_ref evp_cipher_ctx_st_t "ctx";
  crucible_return ctx_ptr;
};

let EVP_CIPHER_CTX_free_spec = do {
  (_, ctx_ptr) <- inout_ref evp_cipher_ctx_st_t "ctx";
  crucible_execute_func [ctx_ptr];
};

let EVP_CIPHER_CTX_free_null_spec = do {
  crucible_execute_func [crucible_null];
};

let EVP_CIPHER_CTX_set_padding_spec = do {
  (_, ctx_ptr) <- inout_ref evp_cipher_ctx_st_t "ctx";
  crucible_execute_func [ctx_ptr, tm {{ 0:[32] }}];
  _ <- point_to evp_cipher_ctx_st_t ctx_ptr "ctx'";
  crucible_return (tm {{ 1:[32] }});
};

let EVP_EncryptInit_ex_spec = do {
  (_, ctx_ptr) <- inout_ref evp_cipher_ctx_st_t "ctx";
  (_, type_ptr) <- in_ref evp_cipher_st_t "type";
  (_, key_ptr) <- in_ref (i8_array_t AES256_KEY_SIZE) "key";
  crucible_execute_func [ctx_ptr, type_ptr, crucible_null, key_ptr, crucible_null];
  _ <- point_to evp_cipher_ctx_st_t ctx_ptr "ctx'";
  ret <- crucible_fresh_var "ret" i32;
  crucible_postcond {{ ret == 0 \/ ret == 1 }};
  crucible_return (tm ret);
};

let EVP_EncryptUpdate_spec = do {
  (_, ctx_ptr) <- inout_ref evp_cipher_ctx_st_t "ctx";
  out_ptr <- out_ref (i8_array_t AES256_BLOCK_SIZE);
  outl_ptr <- out_ref i32;
  (_, in_ptr) <- in_ref (i8_array_t AES256_BLOCK_SIZE) "in";
  crucible_execute_func [ctx_ptr, out_ptr, outl_ptr, in_ptr, tm {{ `AES256_BLOCK_SIZE:[32] }}];
  ret <- crucible_fresh_var "ret" i32;
  crucible_postcond {{ ret == 0 \/ ret == 1 }};
  crucible_return (tm ret);
  _ <- point_to evp_cipher_ctx_st_t ctx_ptr "ctx'";
  _ <- conditional_point_to {{ ret == 1 }} (i8_array_t AES256_BLOCK_SIZE) out_ptr "out";
  return ();
};

let EVP_aes_256_ecb_spec = do {
  crucible_execute_func [];
  (_, type_ptr) <- inout_ref evp_cipher_st_t "type";
  crucible_return type_ptr;
};

// SHA384 spec
let sha384_spec len = do {
  (_, mp) <- in_ref (i8_array_t len) "m";
  rp <- out_ref (i8_array_t SHA384_HASH_SIZE);
  crucible_execute_func [mp, tm {{ `len:[64] }}, rp];
  _ <- point_to (i8_array_t SHA384_HASH_SIZE) rp "r";
  crucible_return rp;
};


///////////////////////////////////////////////////////////////////////////////
// Proof Commands

EVP_CIPHER_CTX_new_ov <- admit "EVP_CIPHER_CTX_new" [] EVP_CIPHER_CTX_new_spec;

EVP_CIPHER_CTX_free_ov <- admit "EVP_CIPHER_CTX_free" [] EVP_CIPHER_CTX_free_spec;
EVP_CIPHER_CTX_free_null_ov <- admit "EVP_CIPHER_CTX_free" [] EVP_CIPHER_CTX_free_null_spec;

EVP_CIPHER_CTX_set_padding_ov <- admit "EVP_CIPHER_CTX_set_padding" [] EVP_CIPHER_CTX_set_padding_spec;

EVP_EncryptInit_ex_ov <- admit "EVP_EncryptInit_ex" [] EVP_EncryptInit_ex_spec;

EVP_EncryptUpdate_ov <- admit "EVP_EncryptUpdate" [] EVP_EncryptUpdate_spec;

EVP_aes_256_ecb_ov <- admit "EVP_aes_256_ecb" [] EVP_aes_256_ecb_spec;

sha384_2xR_ov <- admit "SHA384" []
  (sha384_spec (eval_int {{ `(2 * R_SIZE) : [64] }}));
sha384_4xR_ov <- admit "SHA384" []
  (sha384_spec (eval_int {{ `(4 * R_SIZE) : [64] }}));

