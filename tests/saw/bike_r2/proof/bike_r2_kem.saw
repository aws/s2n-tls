// bike_r2_kem.saw Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0


///////////////////////////////////////////////////////////////////////////////
// Specifications

let split_e_spec = do {
  splitted_e_ptr <- out_ref split_e_t;
  (_, e_ptr) <- in_ref e_t "e";
  crucible_execute_func [splitted_e_ptr, e_ptr];
  _ <- point_to split_e_t splitted_e_ptr "splitted_e";
  return ();
};

let keypair_spec = do {
  pk_ptr <- out_ref char_pk_t;
  sk_ptr <- out_ref char_sk_t;
  crucible_alloc_global bike_errno_glob_name;
  _ <- point_to i32 (crucible_global bike_errno_glob_name) "bike_errno";

  crucible_execute_func [pk_ptr, sk_ptr];

  ret <- return_code;
  _ <- conditional_point_to {{ ret == `SUCCESS }} char_pk_t pk_ptr "pk";
  _ <- conditional_point_to {{ ret == `SUCCESS }} char_sk_t sk_ptr "sk";
  _ <- point_to i32 (crucible_global bike_errno_glob_name) "bike_errno'";
  return ();
};

let crypto_kem_enc_spec = do {
  ct_ptr <- out_ref char_ct_t;
  ss_ptr <- out_ref char_ss_t;
  (_, pk_ptr) <- in_ref char_pk_t "pk";
  crucible_alloc_global bike_errno_glob_name;
  _ <- point_to i32 (crucible_global bike_errno_glob_name) "bike_errno";

  crucible_execute_func [ct_ptr, ss_ptr, pk_ptr];

  ret <- return_code;
  _ <- conditional_point_to {{ ret == `SUCCESS }} char_ct_t ct_ptr "ct";
  _ <- conditional_point_to {{ ret == `SUCCESS }} char_ss_t ss_ptr "ss";
  _ <- point_to i32 (crucible_global bike_errno_glob_name) "bike_errno'";
  return ();
};

let crypto_kem_dec_spec = do {
  ss_ptr <- out_ref char_ss_t;
  (_, ct_ptr) <- in_ref char_ct_t "ct";
  (_, sk_ptr) <- in_ref char_sk_t "sk";
  crucible_alloc_global bike_errno_glob_name;
  _ <- point_to i32 (crucible_global bike_errno_glob_name) "bike_errno";

  crucible_execute_func [ss_ptr, ct_ptr, sk_ptr];

  ret <- return_code;
  _ <- conditional_point_to {{ ret == `SUCCESS }} char_ss_t ss_ptr "ss";
  _ <- point_to i32 (crucible_global bike_errno_glob_name) "bike_errno'";
  return ();
};


///////////////////////////////////////////////////////////////////////////////
// Proof commands

split_e_ov <- verify split_e_fun_name [] split_e_spec;

keypair_ov <- verify crypto_kem_keypair_fun_name
  [ EVP_CIPHER_CTX_new_ov
  , EVP_CIPHER_CTX_free_ov
  , EVP_CIPHER_CTX_free_null_ov
  , EVP_CIPHER_CTX_set_padding_ov
  , EVP_EncryptInit_ex_ov
  , EVP_aes_256_ecb_ov
  , aes_ctr_prf_R_0_ov
  , aes_ctr_prf_R_1_ov
  , generate_sparse_rep_DV_R_ov
  , get_random_bytes_ov
  , gf2x_mod_mul_ov
  , sample_uniform_r_bits_ov
  ]
  keypair_spec;

crypto_kem_enc_ov <- verify crypto_kem_enc_fun_name
  [ EVP_CIPHER_CTX_new_ov
  , EVP_CIPHER_CTX_free_ov
  , EVP_CIPHER_CTX_free_null_ov
  , EVP_CIPHER_CTX_set_padding_ov
  , EVP_EncryptInit_ex_ov
  , EVP_aes_256_ecb_ov
  , aes_ctr_prf_R_0_ov
  , generate_sparse_rep_T1_N_ov
  , get_random_bytes_ov
  , gf2x_add_ov
  , gf2x_mod_mul_ov
  , sha384_2xR_ov
  , sha384_4xR_ov
  , sample_uniform_r_bits_ov
  , split_e_ov
  ]
  crypto_kem_enc_spec;

crypto_kem_dec_ov <- verify crypto_kem_dec_fun_name
  [ EVP_CIPHER_CTX_new_ov
  , EVP_CIPHER_CTX_free_ov
  , EVP_CIPHER_CTX_free_null_ov
  , EVP_CIPHER_CTX_set_padding_ov
  , EVP_EncryptInit_ex_ov
  , EVP_aes_256_ecb_ov
  , aes_ctr_prf_R_0_ov
  , compute_syndrome_ov
  , decode_ov
  , generate_sparse_rep_T1_N_ov
  , get_random_bytes_ov
  , gf2x_add_ov
  , gf2x_mod_mul_ov
  , sha384_2xR_ov
  , sha384_4xR_ov
  , r_bits_vector_weight_ov
  , secure_cmp32_ov
  , secure_l32_mask_ov
  , split_e_ov
  ]
  crypto_kem_dec_spec;

