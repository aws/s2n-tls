// helpers.saw Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0


///////////////////////////////////////////////////////////////////////////////
// Helper functions for writing crucible setups

let i8 = llvm_int 8;
let i16 = llvm_int 16;
let i32 = llvm_int 32;
let i64 = llvm_int 64;
let tm = crucible_term;

let ptr_to_fresh n ty = do {
  x <- crucible_fresh_var n ty;
  p <- crucible_alloc ty;
  crucible_points_to p (crucible_term x);
  return (x, p);
};

let ptr_to_fresh_aligned n align ty = do {
  x <- crucible_fresh_var n ty;
  p <- crucible_alloc_aligned align ty;
  crucible_points_to p (crucible_term x);
  return (x, p);
};

let ptr_to_fresh_readonly n ty = do {
  x <- crucible_fresh_var n ty;
  p <- crucible_alloc_readonly ty;
  crucible_points_to p (crucible_term x);
  return (x, p);
};

let ptr_to_fresh_readonly_aligned n align ty = do {
  x <- crucible_fresh_var n ty;
  p <- crucible_alloc_readonly_aligned align ty;
  crucible_points_to p (crucible_term x);
  return (x, p);
};

let conditional_ptr_to_fresh c n ty = do {
  x <- crucible_fresh_var n ty;
  p <- crucible_alloc ty;
  crucible_conditional_points_to c p (crucible_term x);
  return (x, p);
};



// NOTES: These codify the common patterns in defining parameters.
//        There are 3 kinds of reference parameters: in passed by reference,
//        inout passed by reference, and out passed by reference.
let in_ref ty n = ptr_to_fresh_readonly n ty;
let in_ref_aligned align ty n = ptr_to_fresh_readonly_aligned n align ty;

let inout_ref ty n = ptr_to_fresh n ty;
let inout_ref_aligned align ty n = ptr_to_fresh_aligned n align ty;

let out_ref = crucible_alloc;
let out_ref_aligned = crucible_alloc_aligned;

let point_to ty p n = do {
  x <- crucible_fresh_var n ty;
  crucible_points_to p (crucible_term x);
  return x;
};

let conditional_point_to c ty p n = do {
  x <- crucible_fresh_var n ty;
  crucible_conditional_points_to c p (crucible_term x);
  return x;
};

let return_code = do {
  ret <- crucible_fresh_var "ret" i32;
  crucible_postcond {{ ret == `SUCCESS \/ ret == `FAIL }};
  crucible_return (tm ret);
  return ret;
};

