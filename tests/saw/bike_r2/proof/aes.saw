// aes.saw Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0


///////////////////////////////////////////////////////////////////////////////
// Specifications

let aes256_enc_spec = do {
  ct_ptr <- out_ref (i8_array_t AES256_BLOCK_SIZE);
  (_, pt_ptr) <- in_ref (i8_array_t AES256_BLOCK_SIZE) "pt";
  ks_ptr <- crucible_alloc_readonly aes256_ks_t;
  (_, ctx_ptr) <- ptr_to_fresh "ctx" evp_cipher_ctx_st_t;
  crucible_points_to ks_ptr ctx_ptr;
  crucible_alloc_global bike_errno_glob_name;
  _ <- point_to i32 (crucible_global bike_errno_glob_name) "bike_errno";

  crucible_execute_func [ct_ptr, pt_ptr, ks_ptr];

  ret <- return_code;
  _ <- conditional_point_to {{ ret == `SUCCESS }} (i8_array_t AES256_BLOCK_SIZE) ct_ptr "ct";
  _ <- point_to evp_cipher_ctx_st_t ctx_ptr "ctx'";
  _ <- point_to i32 (crucible_global bike_errno_glob_name) "bike_errno'";
  return ();
};

let perform_aes_spec = do {
  ct_ptr <- out_ref (i8_array_t AES256_BLOCK_SIZE);
  (s, s_ptr, ctx_ptr) <- ptr_to_fresh_aes_ctr_prf_state "s";
  crucible_alloc_global bike_errno_glob_name;
  _ <- point_to i32 (crucible_global bike_errno_glob_name) "bike_errno";

  crucible_precond {{ s.pos <= `AES256_BLOCK_SIZE }};

  crucible_execute_func [s_ptr, ct_ptr];

  ret <- return_code;

  _ <- conditional_point_to {{ ret == `SUCCESS }} (i8_array_t AES256_BLOCK_SIZE) ct_ptr "ct";
  s' <- points_to_fresh_aes_ctr_prf_state (false, {{ True }}) s_ptr ctx_ptr "s'";
  _ <- point_to i32 (crucible_global bike_errno_glob_name) "bike_errno'";

  crucible_postcond {{ s'.pos <= `AES256_BLOCK_SIZE }};
};

let perform_aes_overlap_spec = do {
  (s, s_ptr, ctx_ptr) <- ptr_to_fresh_aes_ctr_prf_state "s";
  crucible_alloc_global bike_errno_glob_name;
  _ <- point_to i32 (crucible_global bike_errno_glob_name) "bike_errno";

  crucible_precond {{ s.pos <= `AES256_BLOCK_SIZE }};

  crucible_execute_func [s_ptr, (crucible_field s_ptr "buffer")];

  ret <- return_code;

  s' <- points_to_fresh_aes_ctr_prf_state (true, {{ ret == `SUCCESS }}) s_ptr ctx_ptr "s'";
  _ <- point_to i32 (crucible_global bike_errno_glob_name) "bike_errno'";

  crucible_postcond {{ s'.pos <= `AES256_BLOCK_SIZE }};
};

let aes_ctr_prf_spec len = do {
  a_ptr <- out_ref (i8_array_t len);
  (s, s_ptr, ctx_ptr) <- ptr_to_fresh_aes_ctr_prf_state "s";
  crucible_alloc_global bike_errno_glob_name;
  _ <- point_to i32 (crucible_global bike_errno_glob_name) "bike_errno";

  crucible_precond {{ s.pos <= `AES256_BLOCK_SIZE }};
  crucible_precond {{ `len < 2^^32 - `AES256_BLOCK_SIZE }};

  crucible_execute_func [a_ptr, s_ptr, tm {{ `len:[32] }}];

  ret <- return_code;

  _ <- conditional_point_to {{ ret == `SUCCESS }} (i8_array_t len) a_ptr "a";
  s' <- points_to_fresh_aes_ctr_prf_state (true, {{ ret == `SUCCESS }}) s_ptr ctx_ptr "s'";
  _ <- point_to i32 (crucible_global bike_errno_glob_name) "bike_errno'";

  crucible_postcond {{ s'.pos <= `AES256_BLOCK_SIZE }};
};

let next_pos len pos = eval_int {{ `((pos + len) % AES256_BLOCK_SIZE) : [8] }};

let aes_ctr_prf_pos_spec len pos = do {
  a_ptr <- out_ref (i8_array_t len);
  s_ptr <- crucible_alloc aes_ctr_prf_state_t;
  ctx_ptr <- crucible_alloc evp_cipher_ctx_st_t;
  let name = "s";
  _ <- point_to uint128_t (crucible_field s_ptr "ctr") (str_concat name ".ctr");
  _ <- point_to uint128_t (crucible_field s_ptr "buffer") (str_concat name ".buffer");
  crucible_points_to (crucible_field s_ptr "ks_ptr") ctx_ptr;
  _ <- point_to evp_cipher_ctx_st_t ctx_ptr (str_concat name ".ks");
  _ <- point_to i32 (crucible_field s_ptr "rem_invokations") (str_concat name ".rem_invokations");
  crucible_points_to (crucible_field s_ptr "pos") (tm {{ `pos:[8] }});
  let s = {{ {pos=`pos} }};
  crucible_alloc_global bike_errno_glob_name;
  _ <- point_to i32 (crucible_global bike_errno_glob_name) "bike_errno";

  crucible_precond {{ s.pos <= `AES256_BLOCK_SIZE }};
  crucible_precond {{ `len < 2^^32 - `AES256_BLOCK_SIZE }};

  crucible_execute_func [a_ptr, s_ptr, tm {{ `len:[32] }}];

  ret <- return_code;

  _ <- conditional_point_to {{ ret == `SUCCESS }} (i8_array_t len) a_ptr "a";
  s' <- points_to_fresh_aes_ctr_prf_state (true, {{ ret == `SUCCESS }}) s_ptr ctx_ptr "s'";
  _ <- point_to i32 (crucible_global bike_errno_glob_name) "bike_errno'";

  let pos' = next_pos len pos;
  crucible_postcond {{ s'.pos <= `AES256_BLOCK_SIZE }};
  crucible_postcond {{ ret == `SUCCESS ==> s'.pos == `pos' }};
};


///////////////////////////////////////////////////////////////////////////////
// Proof Commands

aes256_enc_ov <- verify "aes256_enc"
  [EVP_EncryptUpdate_ov]
  aes256_enc_spec;

perform_aes_ov <- verify "perform_aes"
  [aes256_enc_ov]
  perform_aes_spec;
perform_aes_overlap_ov <- verify "perform_aes"
  [aes256_enc_ov]
  perform_aes_overlap_spec;

aes_ctr_prf_4_ov <- verify aes_ctr_prf_fun_name
  [aes256_enc_ov]
  (aes_ctr_prf_spec 4);
aes_ctr_prf_R_0_ov <- verify aes_ctr_prf_fun_name
  [ perform_aes_ov
  , perform_aes_overlap_ov
  ]
  (aes_ctr_prf_pos_spec R_SIZE AES256_BLOCK_SIZE);
aes_ctr_prf_R_1_ov <- verify aes_ctr_prf_fun_name
  [ perform_aes_ov
  , perform_aes_overlap_ov
  ]
  (aes_ctr_prf_pos_spec R_SIZE (next_pos R_SIZE AES256_BLOCK_SIZE));

