// aes.saw Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0


///////////////////////////////////////////////////////////////////////////////
// Specifications

let aes256_key_expansion_spec = do {
  ks_ptr <- crucible_alloc aes256_ks_t;
  (_, key_ptr) <- in_ref aes256_key_t "key";
  crucible_execute_func [ks_ptr, key_ptr];
  (_, ctx_ptr) <- ptr_to_fresh "ctx" evp_cipher_ctx_st_t;
  crucible_points_to ks_ptr ctx_ptr;
  crucible_return (tm {{ fromInteger`{[32]} SUCCESS }});
};

let aes256_enc_spec = do {
  ct_ptr <- out_ref (i8_array_t AES256_BLOCK_SIZE);
  (_, pt_ptr) <- in_ref (i8_array_t AES256_BLOCK_SIZE) "pt";
  ks_ptr <- crucible_alloc_readonly aes256_ks_t;
  (_, ctx_ptr) <- ptr_to_fresh "ctx" evp_cipher_ctx_st_t;
  crucible_points_to ks_ptr ctx_ptr;
  crucible_execute_func [ct_ptr, pt_ptr, ks_ptr];
  _ <- point_to (i8_array_t AES256_BLOCK_SIZE) ct_ptr "ct";
  _ <- point_to evp_cipher_ctx_st_t ctx_ptr "ctx'";
  crucible_return (tm {{ fromInteger`{[32]} SUCCESS }});
};

let aes256_free_ks_spec = do {
  ks_ptr <- crucible_alloc aes256_ks_t;
  (_, ctx_ptr) <- ptr_to_fresh "ctx" evp_cipher_ctx_st_t;
  crucible_points_to ks_ptr ctx_ptr;
  crucible_execute_func [ks_ptr];
};

/* NOTE: interesting features of aes_ctr_prf:

  - 'aes_ctr_prf` writes to the whole OUT parameter on success, but
    might possibly fail, returning a non-SUCCESS code and not writing
    to all (maybe not any) of the OUT parameter.

  - Expanding on the section point, the failue code is only returned if the
    `rem_invokations` parameter drops to zero.  So we will just add a
    precondition on every call that this will not happen.  Otherwise I do
    not know how we could describe the effect on the OUT parameter.

  - We need to track the `rem_invokations` counter and the `pos`:

    - rem_invokations must be positive so that we know the prf gives a result.
      otherwise several functions can bail out early, now writing to their OUT
      parameters.

    - Unless `pos <= AES256_BLOCK_SIZE`, the aes_ctr_prf code can get
      memory errors.  So this invariant is an important property to track.
*/

let init_aes_ctr_prf_state_spec = do {
  s_ptr <- crucible_alloc aes_ctr_prf_state_t;
  max_invokations <- crucible_fresh_var "max_invokations" i32;
  (_, seed_ptr) <- in_ref seed_t "seed";

  crucible_precond {{ max_invokations > 0 }};

  crucible_execute_func [s_ptr, tm max_invokations, seed_ptr];

  ctx_ptr <- crucible_alloc evp_cipher_ctx_st_t;
  s <- points_to_fresh_aes_ctr_prf_state s_ptr ctx_ptr "s";

  crucible_postcond {{ s.rem_invokations == max_invokations }};
  crucible_postcond {{ s.pos == `AES256_BLOCK_SIZE }};

  crucible_return (tm {{fromInteger`{[32]} SUCCESS}});
};

let aes_ctr_prf_spec len check_rem_invokations = do {
  a_ptr <- out_ref (i8_array_t len);
  (s, s_ptr, ctx_ptr) <- ptr_to_fresh_aes_ctr_prf_state "s";

  crucible_precond {{ s.pos <= `AES256_BLOCK_SIZE }};

  if check_rem_invokations then do {
    crucible_precond {{ s.rem_invokations >= `(len / AES256_BLOCK_SIZE) + 1 }};
  } else do {
    return ();
  };

  crucible_precond {{ `len < 2^^32 - `AES256_BLOCK_SIZE }};

  crucible_execute_func [a_ptr, s_ptr, tm {{ `len : [32] }}];

  _ <- point_to (i8_array_t len) a_ptr "a";
  s' <- points_to_fresh_aes_ctr_prf_state s_ptr ctx_ptr "s'";

  crucible_postcond {{ s'.pos <= `AES256_BLOCK_SIZE }};

  if check_rem_invokations then do {
    crucible_postcond {{ s'.rem_invokations >= s.rem_invokations - `(len / AES256_BLOCK_SIZE) - 1 }};
  } else do {
    return ();
  };

  crucible_return (tm {{fromInteger`{[32]} SUCCESS}});
};

let finalize_aes_ctr_prf_spec = do {
  (_, s_ptr, _) <- ptr_to_fresh_aes_ctr_prf_state "s";
  crucible_execute_func [s_ptr];
};


///////////////////////////////////////////////////////////////////////////////
// Proof Commands

aes256_key_expansion_ov <- verify "aes256_key_expansion"
  [ EVP_CIPHER_CTX_new_ov
  , EVP_CIPHER_CTX_free_ov
  , EVP_CIPHER_CTX_set_padding_ov
  , EVP_EncryptInit_ex_ov
  , EVP_aes_256_ecb_ov
  ]
  aes256_key_expansion_spec;

aes256_enc_ov <- verify "aes256_enc"
  [EVP_EncryptUpdate_ov]
  aes256_enc_spec;

aes256_free_ks_ov <- verify "aes256_free_ks"
  [EVP_CIPHER_CTX_free_ov]
  aes256_free_ks_spec;

init_aes_ctr_prf_state_ov <- verify init_aes_ctr_prf_state_fun_name
  [aes256_key_expansion_ov]
  init_aes_ctr_prf_state_spec;

// NOTE: this is admit because the spec is actually incomplete, in that
//       it does not check the value of rem_invokations. This is used by
//       get_rand_mod_len which could in theory run out of invocations
//       and fail, but we can't write the correct spec for get_rand_mod_len
//       in saw.
aes_ctr_prf_4_ov <- admit aes_ctr_prf_fun_name
  [aes256_enc_ov]
  (aes_ctr_prf_spec 4 false);

finalize_aes_ctr_prf_ov <- verify "finalize_aes_ctr_prf"
  [aes256_free_ks_ov]
  finalize_aes_ctr_prf_spec;

