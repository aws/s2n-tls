//base.saw Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0


///////////////////////////////////////////////////////////////////////////////
// Base definitions and helper functions used by all proofs

m <- llvm_load_module "../../bitcode/all_llvm.bc";


///////////////////////////////////////////////////////////////////////////////
// Generic Crucible and LLVM

let i8 = llvm_int 8;
let i16 = llvm_int 16;
let i32 = llvm_int 32;
let i64 = llvm_int 64;
let tm = crucible_term;

let tactic unints =
    if debug then
        ( do {
            simplify (cryptol_ss ());
            print_goal; 
            w4_unint_yices unints;} )
    else w4_unint_yices unints;

///////////////////////////////////////////////////////////////////////////////
// Proof commands for use in production

let verify_unint func overrides unints spec =
    if do_prove then
        crucible_llvm_verify m func overrides false spec (tactic unints)
    else
        crucible_llvm_unsafe_assume_spec m func spec;

let verify func overrides spec =
    verify_unint func overrides [] spec;

let admit func overrides spec =
    crucible_llvm_unsafe_assume_spec m func spec;

let test func overrides spec =
    if do_prove then
        crucible_llvm_verify m func overrides false spec (quickcheck 100)
    else
        crucible_llvm_unsafe_assume_spec m func spec;

let really_verify_simps func overrides unints spec transformations =
    crucible_llvm_verify m func overrides false spec do {
        transformations;
        unint_yices unints;
    };

let verify_simps func overrides unints spec transformations =
    if do_prove then
        really_verify_simps func overrides unints spec transformations
    else
        crucible_llvm_unsafe_assume_spec m func spec;

let custom_verify func overrides spec custom_tactic =
    if do_prove then
        crucible_llvm_verify m func overrides false spec custom_tactic
    else
        crucible_llvm_unsafe_assume_spec m func spec;

let verify_shake_unint func overrides unints spec =
    if do_prove then
        crucible_llvm_verify m func overrides true spec (tactic unints)
    else
        crucible_llvm_unsafe_assume_spec m func spec;

///////////////////////////////////////////////////////////////////////////////
// Proof commands for use with debugging

let really_verify func overrides spec =
    crucible_llvm_verify m func overrides false spec (tactic []);

let really_verify_simps func overrides unints spec transformations =
    crucible_llvm_verify m func overrides false spec do {
        transformations;
        unint_yices unints;
    };

let really_verify_unint func overrides unints spec =
    crucible_llvm_verify m func overrides false spec (tactic unints);

let really_test func overrides spec =
    crucible_llvm_verify m func overrides false spec (quickcheck 100);

let really_custom_verify func overrides spec custom_tactic =
    crucible_llvm_verify m func overrides false spec custom_tactic;

let show_admit func overrides spec =
    crucible_llvm_verify m func overrides false spec
        (do { simplify basic_ss; simplify 
            (cryptol_ss()); print_goal; assume_unsat; });

let show_goal func overrides unints spec transformations =
    crucible_llvm_verify m func overrides false spec do {
        transformations;
        print_goal;
        unint_yices unints;
    };


///////////////////////////////////////////////////////////////////////////////
// Common helper functions

let alloc_init ty v = do {
    p <- crucible_alloc ty;
    crucible_points_to p (crucible_term v);
    return p;
};

let alloc_init_readonly ty v = do {
    p <- crucible_alloc_readonly ty;
    crucible_points_to p (crucible_term v);
    return p;
};

let ptr_to_fresh n ty = do {
    x <- crucible_fresh_var n ty;
    p <- alloc_init ty x;
    return (x, p);
};

let ptr_to_fresh_readonly n ty = do {
    x <- crucible_fresh_var n ty;
    p <- alloc_init_readonly ty x;
    return (x, p);
};

let points_to_fresh p n ty = do {
    x <- crucible_fresh_var n ty;
    crucible_points_to p (crucible_term x);
    return x;
};

