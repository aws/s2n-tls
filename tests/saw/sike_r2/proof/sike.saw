//sike.saw Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

///////////////////////////////////////////////////////////////////////////////
// Verify the top-level SIKE functions


///////////////////////////////////////////////////////////////////////////////
// Specifications

let crypto_kem_enc_spec = do {
    ctp <- crucible_alloc (llvm_array CRYPTO_CIPHERTEXTBYTES char_t);
    ssp <- crucible_alloc (llvm_array CRYPTO_BYTES char_t);
    (pk, pkp) <- ptr_to_fresh_readonly "pk" (llvm_array CRYPTO_PUBLICKEYBYTES char_t);
    crucible_execute_func [ctp, ssp, pkp];
    _ <- points_to_fresh ctp "ct" (llvm_array CRYPTO_CIPHERTEXTBYTES char_t);
    _ <- points_to_fresh ssp "ss" (llvm_array CRYPTO_BYTES char_t);
    crucible_return (crucible_term {{ 0:[32] }});
};

let crypto_kem_dec_spec = do {
    ssp <- crucible_alloc (llvm_array CRYPTO_BYTES char_t);
    (ct, ctp) <- ptr_to_fresh_readonly "ct" (llvm_array CRYPTO_CIPHERTEXTBYTES char_t);
    (sk, skp) <- ptr_to_fresh_readonly "sk" (llvm_array CRYPTO_SECRETKEYBYTES char_t);
    crucible_execute_func [ssp, ctp, skp];
    _ <- points_to_fresh ssp "ss" (llvm_array CRYPTO_BYTES char_t);
    crucible_return (crucible_term {{ 0:[32] }});
};

let crypto_kem_keypair_spec = do {
    pkp <- crucible_alloc (llvm_array CRYPTO_PUBLICKEYBYTES char_t);
    skp <- crucible_alloc (llvm_array CRYPTO_SECRETKEYBYTES char_t);
    crucible_execute_func [pkp, skp];
    _ <- points_to_fresh pkp "pk" (llvm_array CRYPTO_PUBLICKEYBYTES char_t);
    _ <- points_to_fresh skp "sk" (llvm_array CRYPTO_SECRETKEYBYTES char_t);
    crucible_return (crucible_term {{ 0:[32] }});
};

///////////////////////////////////////////////////////////////////////////////
// Proof commands

crypto_kem_keypair_ov <- verify SIKE_crypto_kem_keypair_fun_name
    [ randombytes_sike_ov
    , random_mod_order_B_ov
    , ephemeralKeyGeneration_B_ov
    ]
    crypto_kem_keypair_spec;

crypto_kem_enc_ov <- verify SIKE_crypto_kem_enc_fun_name
    [ randombytes_sike_ov
    , ephemeralSecretAgreement_A_ov
    , ephemeralKeyGeneration_A_ov
    , shake256_ov0
    , shake256_ov1
    , shake256_ov2
    ]
    crypto_kem_enc_spec;

crypto_kem_dec_ov <- verify SIKE_crypto_kem_dec_fun_name
    [ ephemeralSecretAgreement_B_ov
    , shake256_ov0
    , shake256_ov1
    , shake256_ov2
    , ephemeralKeyGeneration_A_ov
    , memcmp_ov_for_kem_dec
    ]
    crypto_kem_dec_spec;

