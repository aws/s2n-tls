// sike_base.saw Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0


///////////////////////////////////////////////////////////////////////////////
// SIKE definitions and helper functions used by all proofs


///////////////////////////////////////////////////////////////////////////////
// SIKE constants and types

let MAXBITS_ORDER = NBITS_ORDER;
let max_words_order = eval_int {{ `((MAXBITS_ORDER + RADIX - 1) / RADIX) : [64] }};
let twice_nwords_field = eval_int {{ `(2 * nwords_field) : [64] }};

let SECRETKEY_A_BYTES = eval_int {{ `((OALICE_BITS + 7) / 8) : [64] }};
let SECRETKEY_B_BYTES = eval_int {{ `((OBOB_BITS + 7) / 8) : [64] }};
let FP2_ENCODED_BYTES = eval_int {{ `(2 * ((NBITS_FIELD + 7) / 8)) : [64] }};

let CRYPTO_PUBLICKEYBYTES = eval_int {{ `(3 * FP2_ENCODED_BYTES) : [64] }};
let CRYPTO_SECRETKEYBYTES = eval_int {{ `(MSG_BYTES + SECRETKEY_B_BYTES + CRYPTO_PUBLICKEYBYTES) : [64] }};
let CRYPTO_CIPHERTEXTBYTES = eval_int {{ `(CRYPTO_PUBLICKEYBYTES + MSG_BYTES) : [64] }};

let SHAKE128_RATE = 168;
let SHAKE256_RATE = 136;

let CIPHERTEXT_PLUS_MSG_BYTES = eval_int {{ `(CRYPTO_CIPHERTEXTBYTES + MSG_BYTES) : [64] }};


let char_t = llvm_int 8;
// NOTE: This value would be 32 on a 32-bit architecture
let digit_t = llvm_int 64;

let felm_t = llvm_array nwords_field digit_t;
let dfelm_t = llvm_array twice_nwords_field digit_t;
let f2elm_t = llvm_array 2 felm_t;


///////////////////////////////////////////////////////////////////////////////
// Aliases

let point_struct = llvm_struct "struct.point_proj";
let point_proj_t = llvm_array 1 point_struct;
let fresh_digit n = crucible_fresh_var n digit_t;

// NOTE: These values are read but never modified
let A_param v ty= ptr_to_fresh_readonly v ty;
let A_felm_t v = ptr_to_fresh_readonly v felm_t;
let A_f2elm_t v = ptr_to_fresh_readonly v f2elm_t;
let A_dfelm_t v = ptr_to_fresh_readonly v dfelm_t;
let A_point_t v = ptr_to_fresh_readonly v point_proj_t;
let A_digit_t v = ptr_to_fresh_readonly v digit_t;
let A_int_t v = crucible_fresh_var v i32;
let A_uint_t v = crucible_fresh_var v i32;
let A_uint64_t v = crucible_fresh_var v (llvm_int 64);
let A_char_t v = ptr_to_fresh_readonly v char_t;
let A_digit_it v = crucible_fresh_var v digit_t;

// NOTE: This values are read and potentially modified
let B_felm_t v = ptr_to_fresh v felm_t;
let B_f2elm_t v = ptr_to_fresh v f2elm_t;
let B_dfelm_t v = ptr_to_fresh v dfelm_t;
let B_point_t v = ptr_to_fresh v point_proj_t;

// NOTE: This values are outputs
let C_felm_t() = crucible_alloc felm_t;
let C_f2elm_t() = crucible_alloc f2elm_t;
let C_point_t() = crucible_alloc point_proj_t;


// NOTE: we are overiding memcmp as it is not link in the bc file
let memcmp_simple_spec n = do {
    (x, xp) <- ptr_to_fresh_readonly "x" (llvm_array n i8);
    (y, yp) <- ptr_to_fresh_readonly "y" (llvm_array n i8);
    crucible_execute_func [xp, yp, tm {{ `n : [64] }}];
    crucible_return (tm {{ if x < y then -1 else if x == y then 0:[32] else 1 }});
};

memcmp_ov_for_kem_dec <- admit "memcmp" [] (memcmp_simple_spec CRYPTO_PUBLICKEYBYTES);


/* Note the following conventions: 
"_ov" indicates an overrides, "O" is a list of overrides, "U" is a list of uninterpreted functions.
Overrides is a proof specification that can be used as input to other proofs.
Uninterpreted functions are cryptol function that will not get unwrapped/unrolled by the solver.
*/
