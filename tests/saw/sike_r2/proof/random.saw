//random.saw Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

///////////////////////////////////////////////////////////////////////////////
// Verify the random number operations


///////////////////////////////////////////////////////////////////////////////
// Specifications

/* NOTES for get_random_bytes proof:

 - There is nothing to prove about the randombytes operations. We
   just assert that the call returns 0 after putting a value
   into the parameter

 - Randombytes is unspecified as to what the first argument's length is.
   There are three calls, one in sike.c and two in sidh.c.
   They use MSG_BYTES, SECRETKEY_A_BYTES, and SECRETKEY_B_BYTES.
   So we need three specfic overrides.

*/

let randombytes_spec n = do {
    ap <- crucible_alloc (llvm_array n char_t);
    crucible_execute_func [ap, (crucible_term {{ `n:[32] }})];
    rand <- crucible_fresh_var "random_bytes" (llvm_array n char_t);
    crucible_points_to ap (crucible_term rand);
    crucible_return (crucible_term {{0:[32]}});
};

///////////////////////////////////////////////////////////////////////////////
// Proof commands

randombytes_sike_ov <- crucible_llvm_unsafe_assume_spec  m
    "get_random_bytes" (randombytes_spec MSG_BYTES);

randombytes_sidh_alice_ov <- crucible_llvm_unsafe_assume_spec  m
    "get_random_bytes" (randombytes_spec SECRETKEY_A_BYTES);

randombytes_sidh_bob_ov <- crucible_llvm_unsafe_assume_spec  m
    "get_random_bytes" (randombytes_spec SECRETKEY_B_BYTES);

