//sidh.saw Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

///////////////////////////////////////////////////////////////////////////////
// Verify the SIDH functions


///////////////////////////////////////////////////////////////////////////////
// Specifications

// NOTE: While not stated in the code, this function should expect that the
//       parameter is in fact the encoding of a valid fp2 value.
//       We need that here to satisfy the precondition of its call
//       to to_fp2mont.

let fp2_decode_spec = do {
    xp <- C_f2elm_t ();
    (enc, encp) <- ptr_to_fresh_readonly "enc" (llvm_array FP2_ENCODED_BYTES char_t);
    crucible_execute_func [encp, xp];
    x <- crucible_fresh_var "fp2_decode" f2elm_t;
    crucible_points_to xp (tm x);
};

let fp2_encode_spec = do {
    (x, xp) <- A_f2elm_t "x";
    encp <- crucible_alloc (llvm_array FP2_ENCODED_BYTES char_t);
    crucible_execute_func [xp, encp];
    enc <- crucible_fresh_var "fp2_encode" (llvm_array FP2_ENCODED_BYTES char_t);
    crucible_points_to encp (tm enc);
};

let random_mod_order_B_spec = do {
    random_digits_p <- crucible_alloc (llvm_array SECRETKEY_B_BYTES char_t);
    crucible_execute_func [random_digits_p];
    random <- crucible_fresh_var "random" (llvm_array SECRETKEY_B_BYTES char_t);
    crucible_points_to random_digits_p (tm random);
};

let ephemeralKeyGeneration_A_spec = do {
    (a, ap) <- ptr_to_fresh_readonly "PrivateKeyA" (llvm_array SECRETKEY_A_BYTES char_t);
    bp <- crucible_alloc (llvm_array CRYPTO_PUBLICKEYBYTES char_t);
    crucible_execute_func [ap, bp];
    b' <- crucible_fresh_var "b'" (llvm_array CRYPTO_PUBLICKEYBYTES char_t);
    crucible_points_to bp (tm b');
    crucible_return (crucible_term {{ 0:[32] }});
};

let ephemeralKeyGeneration_B_spec = do {
    (a, ap) <- ptr_to_fresh_readonly "PrivateKeyB" (llvm_array SECRETKEY_B_BYTES char_t);
    bp <- crucible_alloc (llvm_array CRYPTO_PUBLICKEYBYTES char_t);
    crucible_execute_func [ap, bp];
    b' <- crucible_fresh_var "b'" (llvm_array CRYPTO_PUBLICKEYBYTES char_t);
    crucible_points_to bp (tm b');
    crucible_return (crucible_term {{ 0:[32] }});
};

let ephemeralSecretAgreement_A_spec = do {
    (a, ap) <- ptr_to_fresh_readonly "PrivateKeyA" (llvm_array SECRETKEY_A_BYTES char_t);
    (b, bp) <- ptr_to_fresh_readonly "PublicKeyB" (llvm_array CRYPTO_PUBLICKEYBYTES char_t);
    ssbp <- crucible_alloc (llvm_array FP2_ENCODED_BYTES char_t); // "SharedSecretA"
    crucible_execute_func [ap, bp, ssbp];
    ssb' <- crucible_fresh_var "b'" (llvm_array FP2_ENCODED_BYTES char_t);
    crucible_points_to ssbp (tm ssb');
    crucible_return (crucible_term {{ 0:[32] }});
};

let ephemeralSecretAgreement_B_spec = do {
    (a, ap) <- ptr_to_fresh_readonly "PrivateKeyB" (llvm_array SECRETKEY_B_BYTES char_t);
    (b, bp) <- ptr_to_fresh_readonly "PublicKeyA" (llvm_array CRYPTO_CIPHERTEXTBYTES char_t);
    ssbp <- crucible_alloc (llvm_array FP2_ENCODED_BYTES char_t); // "SharedSecretB"
    crucible_execute_func [ap, bp, ssbp];
    ssb' <- crucible_fresh_var "b'" (llvm_array FP2_ENCODED_BYTES char_t);
    crucible_points_to ssbp (tm ssb');
    crucible_return (crucible_term {{ 0:[32] }});
};


///////////////////////////////////////////////////////////////////////////////
// Proof commands

random_mod_order_B_ov <- verify random_mod_order_B_fun_name
    [randombytes_sidh_bob_ov] random_mod_order_B_spec;

fp2_decode_ov <- verify fp2_decode_fun_name
    [to_fp2mont_same_ov]
    fp2_decode_spec;
fp2_encode_ov <- verify fp2_encode_fun_name
    [from_fp2mont_ov]
    fp2_encode_spec;

let O_base_Key =
    [ fpcopy_ov
    , fpzero_ov
    , fp2copy_ov
    , fp2neg_ov
    , fpadd_ov
    , fpadd_left_ov
    , fpadd_same_ov
    , fpadd_right_ov
    , fp2add_ov
    , fp2add_left_ov
    , fp2add_same_ov
    , fp2add_right_ov
    , fp2sub_right_ov
    , fp2sub_left_ov
    , fp2sub_same_ov
    , swap_points_ov
    , xDBLADD_ov
    , fp2_encode_ov
    , inv_3_way_ov
    , fp2mul_mont_ov
    , fp2mul_mont_left_ov
    ];

let O_base_KeyA = concat O_base_Key [ LADDER3PT_A_ov ];

let O_base_KeyB = concat O_base_Key [ LADDER3PT_B_ov ];

let O_base_Secret =
    [ fpcopy_ov
    , fpzero_ov
    , fp2copy_ov
    , fp2add_ov
    , fp2add_left_ov
    , fp2add_same_ov
    , fp2add_right_ov
    , fp2sub_right_ov
    , fp2sub_left_ov
    , fp2sub_same_ov
    , fp2div2_same_ov
    , swap_points_ov
    , xDBLADD_ov
    , fp2_encode_ov
    , j_inv_ov
    , get_A_ov
    ];

let O_base_SecretA = concat O_base_Secret
    [ fpadd_same_ov
    , fpadd_pair_ov
    , LADDER3PT_A_ov
    , fp2div2_same_ov
    ];

let O_base_SecretB = concat O_base_Secret
    [ fpadd_same_ov
    , fpadd_pair_ov
    , LADDER3PT_B_ov
    ];

let O_base_Isog4 =
    [ xDBL_same_ov
    , copy_words_same_nwords_field_x4_ov
    , get_4_isog_ov
    , eval_4_isog_ov
    , fp2_decode_ov
    ];

let O_base_Isog3 =
    [ xTPL_same_ov
    , copy_words_same_nwords_field_x4_ov
    , get_3_isog_ov
    , eval_3_isog_ov
    , fp2_decode_ov
    ];

ephemeralKeyGeneration_A_ov <- verify EphemeralKeyGeneration_A_fun_name
  (concat O_base_KeyA O_base_Isog4)
  ephemeralKeyGeneration_A_spec;

ephemeralKeyGeneration_B_ov <- verify EphemeralKeyGeneration_B_fun_name
  (concat O_base_KeyB O_base_Isog3)
  ephemeralKeyGeneration_B_spec;

ephemeralSecretAgreement_A_ov <- verify EphemeralSecretAgreement_A_fun_name
  (concat O_base_SecretA O_base_Isog4)
  ephemeralSecretAgreement_A_spec;

ephemeralSecretAgreement_B_ov <- verify EphemeralSecretAgreement_B_fun_name
  (concat O_base_SecretB O_base_Isog3)
  ephemeralSecretAgreement_B_spec;

