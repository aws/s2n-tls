//cshake.saw Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////////////
// Verify the hashing operations

import "../spec/include/keccak.cry";
import "../spec/interface/cshake.cry";
import "../spec/Loader.cry";

///////////////////////////////////////////////////////////////////////////////
// Specifications

let shake_char_t = llvm_array 8 i8;
let uint16_t = llvm_int 16;
let uint8_t = llvm_array 8 (llvm_int 8);
let state_t = llvm_array 25 digit_t;

let SHAKE256_RATE = 136;
let SHAKE128_RATE = 168;

let load64_spec = do {
    (x, xp) <- ptr_to_fresh "x" shake_char_t;
    crucible_execute_func [xp];
    crucible_return (tm {{ join (reverse x):[64] }});
};

let store64_spec = do {
    (x, xp) <- ptr_to_fresh "x" uint8_t;
    u <- crucible_fresh_var "u" digit_t;
    crucible_precond {{ True }};
    crucible_execute_func [xp, tm u];
    res <- crucible_fresh_var "res" uint8_t;
    crucible_points_to xp (tm res);
    crucible_postcond {{ res ==  (reverse (split u):[8][8]) }};
};

let KeccakF1600_StatePermute_spec = do {
    (s, sp) <- ptr_to_fresh "state" state_t;
    crucible_execute_func [sp];
    c <- crucible_fresh_var "c" state_t;
    crucible_points_to sp (tm c);
    crucible_postcond {{ c ==
        (join (transpose (Keccak_f (transpose (split s): [5][5][64])))) }};
};

let keccak_absorb_ones_spec n RATE = do {
    (s, sp) <- ptr_to_fresh "s" state_t;
    r <- crucible_fresh_var "r" i32;
    (m, mp) <- ptr_to_fresh_readonly "m" (llvm_array n i8);
    mlen <- crucible_fresh_var "mlen" digit_t;
    crucible_precond {{ r== (`RATE:[32]) /\ (mlen == (`n:[64])) }} ;
    crucible_execute_func [sp, (tm r), mp, (tm mlen), (tm {{ 0x1f:[8] }})];
    res <- crucible_fresh_var "res" state_t;
    crucible_points_to sp (tm {{ res }});
    crucible_postcond {{ res ==
        join (transpose ((transpose (split s:[5][5][64]))^(unflatten`{w=64}
        (join (pad`{r= (RATE*8)} (join [reverse x | x<-m]# 0b1111)))))) }};
};

let keccak_absorb_zero_spec n RATE  = do {
    (s, sp) <- ptr_to_fresh "s" state_t;
    r <- crucible_fresh_var "r" i32;
    (m, mp) <- ptr_to_fresh_readonly "m" (llvm_array n i8);
    mlen <- crucible_fresh_var "mlen" digit_t;
    crucible_precond {{ r== (`RATE:[32]) /\ (mlen == (`n:[64]))}};
    crucible_execute_func [sp, (tm r), mp, (tm mlen), (tm {{ 0x04:[8] }})];
    res <- crucible_fresh_var "res" state_t;
    crucible_points_to sp (tm {{res}});
    crucible_postcond {{ res ==
        join (transpose ((transpose (split s:[5][5][64]))^(unflatten`{w=64}
        (join (pad`{r= (RATE*8)} (join [reverse x | x<-m]# 0b00)))))) }};
};

// NOTE: If we add a permutation call at the end of the function,
//       then it will be equivalent to the cryptol's absorb function.

let keccak_absorb_corr_spec n RATE = do {
    (s, sp) <- ptr_to_fresh "s" state_t;
    r <- crucible_fresh_var "r" i32;
    (m, mp) <- ptr_to_fresh "m" (llvm_array n i8);
    mlen <- crucible_fresh_var "mlen" digit_t;
    crucible_precond {{ s== zero /\ r== (`RATE:[32]) /\ (mlen == (`n:[64])) }};
    crucible_execute_func [sp, (tm r), mp, (tm mlen), (tm {{ 0x1f:[8] }})];
    res <- crucible_fresh_var "res" state_t;
    crucible_points_to sp (tm {{ res }});
    crucible_postcond {{ res ==
        join (transpose (absorb`{w=64} (pad`{r= (RATE*8)}
        (join [reverse x | x<-m]#0b1111)))) }};
};

let shake256_spec no ni = do {
    (o, op) <- ptr_to_fresh "output" (llvm_array no i8);
    (i, ip) <- ptr_to_fresh "input" (llvm_array ni i8);
    crucible_precond {{ o == zero }};
    crucible_execute_func [op, (tm {{ `no:[64] }}), ip, (tm {{ `ni:[64] }})];
    res <- crucible_fresh_var "res" (llvm_array no i8);
    crucible_points_to op (tm {{ res }});
    crucible_postcond {{ res ==
        toBytes (take`{512} (SHAKE256 (join [reverse x | x<-i]))) }};
};

let keccak_squeezeblocks_spec nb RATE = do {
    let n = eval_int {{ (`nb)*(`RATE):[64] }};
    (h, hp) <- ptr_to_fresh "h" (llvm_array n i8);
    nblocks <- crucible_fresh_var "nblocks" digit_t;
    (s, sp) <- ptr_to_fresh "s" state_t;
    crucible_precond {{ h == zero /\ s == zero }};
    crucible_execute_func [hp, (tm {{ `nb:[64] }}), sp, (tm {{ `RATE:[32] }})];
    res <- crucible_fresh_var "res" state_t;
    crucible_points_to sp (tm {{ res }});
    crucible_postcond {{ res ==
        join (transpose(Keccak_f(transpose (split s:[5][5][64])))) }};
};

let shake128_absorb_spec ns ni = do {
    (s, sp) <- ptr_to_fresh "s" (llvm_array ns digit_t);
    (i, ip) <- ptr_to_fresh "input" (llvm_array ni i8);
    iB <- crucible_fresh_var "iB" i32;
    crucible_execute_func [sp, ip, (tm iB)];
    res <- crucible_fresh_var "res" digit_t;
    crucible_points_to sp (tm {{ res }});
};

let shake128_squeezeblocks_spec no ns = do {
    (o, op) <- ptr_to_fresh "output" (llvm_array no i8);
    nblocks <- crucible_fresh_var "nblocks" digit_t;
    (s, sp) <- ptr_to_fresh "s" (llvm_array ns digit_t);
    crucible_execute_func [op, (tm nblocks), sp];
    res <- crucible_fresh_var "res" digit_t;
    crucible_points_to sp (tm {{ res}});
};

let shake128_spec no ni = do {
    (o, op) <- ptr_to_fresh "output" (llvm_array no i8);
    outlen <- crucible_fresh_var "outlen" digit_t;
    (i, ip) <- ptr_to_fresh "input" (llvm_array ni i8);
    inlen <- crucible_fresh_var "inlen" digit_t;
    crucible_execute_func [op, (tm outlen), ip, (tm inlen)];
    res <- crucible_fresh_var "res" i8;
    crucible_points_to op (tm {{ res }});
};

let cshake128_simple_absorb_spec n RATE = do {
    (s ,sp) <- ptr_to_fresh "s" state_t;
    cstm <- crucible_fresh_var "cstm" uint16_t;
    (i, ip) <- ptr_to_fresh "input" (llvm_array n i8);
    inlen <- crucible_fresh_var "inlen" digit_t;
    crucible_precond {{ True }};
    crucible_execute_func [sp, (tm {{ cstm:[16] }}), ip, (tm {{ `n:[64] }})];
    res <- crucible_fresh_var "res" state_t ;
    crucible_points_to sp (tm {{ res }});
    crucible_postcond {{ res ==
        (join (transpose (unflatten `{ w=64 }
        (join (pad `{r=(RATE*8)} (join [ reverse x | x<- i]#0b00))))) ^
        join (transpose (Keccak_f (transpose (split ([(drop`{8} (cstm >> 8))#
        (drop`{8} cstm) #0x10010001a801]#(zero:[24][64])):[5][5][64]))))) }};
};

let cshake128_simple_squeezeblocks_spec no ns = do {
    (o, op) <- ptr_to_fresh "output" (llvm_array no i8);
    nblocks <- crucible_fresh_var "nblocks" digit_t;
    (s, sp) <- ptr_to_fresh "s" (llvm_array ns digit_t);
    crucible_execute_func [op, (tm nblocks), sp];
    res <- crucible_fresh_var "res" digit_t;
    crucible_points_to sp (tm {{ res }});
};

let cshake128_simple_spec no ni = do {
    (o, op) <- ptr_to_fresh "output" (llvm_array no i8);
    outlen <- crucible_fresh_var "outlen" digit_t;
    cstm <- crucible_fresh_var "cstm" (llvm_int 16);
    (i, ip) <- ptr_to_fresh "in" (llvm_array ni i8);
    inlen <- crucible_fresh_var "inlen" digit_t;
    crucible_execute_func [op, (tm outlen), (tm cstm), ip, (tm inlen)];
    res <- crucible_fresh_var "res" i8;
    crucible_points_to op (tm {{ res }});
};

let shake256_absorb_spec ns ni = do {
    (s, sp) <- ptr_to_fresh "s" (llvm_array ns digit_t);
    (i, ip) <- ptr_to_fresh "input" (llvm_array ni i8);
    iB <- crucible_fresh_var "inputByteLen" i32;
    crucible_execute_func [sp, ip, (tm iB)];
    res <- crucible_fresh_var "res" digit_t;
    crucible_points_to sp (tm {{ res}});
};

let shake256_squeezeblocks_spec no ns = do{
    (o, op) <- ptr_to_fresh "output" (llvm_array no i8);
    nblocks <- crucible_fresh_var "nblocks" digit_t;
    (s, sp) <- ptr_to_fresh "s" (llvm_array ns digit_t);
    crucible_execute_func [op, (tm nblocks), sp];
};

let cshake256_simple_absorb_spec n RATE = do {
    sp <- crucible_alloc state_t;
    cstm <- crucible_fresh_var "cstm" uint16_t;
    (i, ip) <- ptr_to_fresh "input" (llvm_array n i8);
    crucible_execute_func [sp, (tm cstm), ip, (tm {{ `n:[64] }})];
    res <- crucible_fresh_var "res" state_t;
    crucible_points_to sp (tm {{ res }});
    crucible_postcond {{ res ==
        (join (transpose (unflatten `{w=64}
        (join (pad `{r=(RATE*8)} (join [ reverse x | x<- i]#0b00))))) ^
        join (transpose (Keccak_f (transpose (split ([(drop`{8} (cstm >> 8)) #
        (drop`{8} cstm) #0x100100018801]#(zero:[24][64])):[5][5][64]))))) }};
};

let cshake256_simple_spec n RATE = do {
    (o, op) <- ptr_to_fresh "output" (llvm_array 64 i8);
    cstm <-  crucible_fresh_var "cstm" uint16_t;
    (i, ip) <- ptr_to_fresh "in" (llvm_array n i8);
    crucible_precond {{ True }};
    crucible_execute_func [op, (tm {{ 64:[64] }}),
        (tm cstm), ip, (tm {{ (`n:[64]) }})];
    res <- crucible_fresh_var "res" (llvm_array 64 i8);
    crucible_points_to op (tm {{ res }});
    crucible_postcond {{ [ join (reverse x) | x <-(groupBy`{8} res) ] ==
        take`{8}(join (transpose (Keccak_f
        (transpose (split (join (transpose (unflatten `{w=64}
        (join (pad `{r=(136*8)} (join [ reverse x | x<- i]#0b00))))) ^
        join (transpose (Keccak_f (transpose (split ([(drop`{8}
        ((cstm:[16]) >> 8))# (drop`{8} (cstm:[16])) #0x100100018801] #
        (zero:[24][64])):[5][5][64]))))):[5][5][64]))))) }};
};

let cshake256_simple_spec_admit outsz cstm insz = do {
    op <- crucible_alloc (llvm_array outsz char_t);
    (i, ip) <- ptr_to_fresh_readonly "in" (llvm_array insz char_t);
    crucible_execute_func [op,
        tm {{ (`outsz : [64]) }}, tm {{ (`cstm : [16]) }}, ip,
        (tm {{ `insz:[64] }})];
    crucible_points_to op (tm {{ cshake`{outsz,insz} `cstm i }});
};

let cshake256_simple_squeezeblocks_spec no ns = do {
    (o, op) <- ptr_to_fresh "output" (llvm_array no i8);
    nblocks <- crucible_fresh_var "nblocks" digit_t;
    (s, sp) <- ptr_to_fresh "s" (llvm_array ns digit_t);
    crucible_execute_func [ op, (tm nblocks), sp];
    res <- crucible_fresh_var "res" digit_t;
    crucible_points_to sp (tm {{ res }});
};

///////////////////////////////////////////////////////////////////////////////
// Proof commands

load64_ov <- verify "load64_r1" [] load64_spec;
store64_ov <- verify "store64_r1" [] store64_spec;

KeccakF1600_StatePermute_ov <- admit "KeccakF1600_StatePermute_r1" []
    (KeccakF1600_StatePermute_spec);

// NOTE: The padding value for the following functions is 31 (0x1f)

shake128_absorb_ones_ov <- verify_shake_unint 
    "keccak_absorb_r1" [KeccakF1600_StatePermute_ov]
    [] (keccak_absorb_ones_spec 10 SHAKE128_RATE);
shake256_absorb_ones_ov <- verify_shake_unint
    "keccak_absorb_r1" [KeccakF1600_StatePermute_ov]
    [] (keccak_absorb_ones_spec 10 SHAKE256_RATE);

// NOTE: The padding value for the following functions is 0

shake128_absorb_zero_ov <- verify_shake_unint
    "keccak_absorb_r1" [KeccakF1600_StatePermute_ov]
    [] (keccak_absorb_zero_spec 10 SHAKE128_RATE);
shake256_absorb_zero_ov <- verify_shake_unint
    "keccak_absorb_r1" [KeccakF1600_StatePermute_ov]
    [] (keccak_absorb_zero_spec 10 SHAKE256_RATE);

cshake256_simple_dec_ov <- admit "cshake256_simple_r1"
    [] (cshake256_simple_spec_admit fp2_encoded_bytes 2 24);
cshake256_simple_enc_ov0 <- admit "cshake256_simple_r1"
    [] (cshake256_simple_spec_admit SECRETKEY_A_BYTES 0 402);
cshake256_simple_enc_ov1 <- admit "cshake256_simple_r1"
    [] (cshake256_simple_spec_admit MSG_BYTES 2 fp2_encoded_bytes);
cshake256_simple_enc_ov2 <- admit "cshake256_simple_r1"
    [] (cshake256_simple_spec_admit CRYPTO_BYTES 1 426);
