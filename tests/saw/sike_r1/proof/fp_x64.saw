enable_experimental;

///////////////////////////////////////////////////////////////////////////////
// Specifications

let mp_mul_asm_spec n m = do {
    (a, ap) <- ptr_to_fresh_readonly "a" (llvm_array n digit_t);
    (b, bp) <- ptr_to_fresh_readonly "b" (llvm_array n digit_t);
    cp <- crucible_alloc (llvm_array m digit_t);

    crucible_execute_func [ap, bp, cp];

    points_to_fresh cp "_c" (llvm_array m digit_t);
    return ();
};

let mp_mul_asm_single_spec n m = do {
    (a, ap) <- ptr_to_fresh_readonly "a" (llvm_array n digit_t);
    cp <- crucible_alloc (llvm_array m digit_t);

    crucible_execute_func [ap, ap, cp];

    points_to_fresh cp "_c" (llvm_array m digit_t);
    return ();
};

// In the generic implementation, a call to mp_mul looks like
//   call void @mp_mul(i64* %0, i64* %1, i64* nonnull %6, i32 7), !dbg !31227
// while in the x64 implementation, a call in the same context looks like
//   call void @mp_mul(i64* %0, i64* %1, i64* nonnull %6, i32 undef), !dbg !30891
// It looks like mp_mul is only called on NWORDS_FIELD in the x64
// implementation, and so clang specializes the function and ignores
// the last argument.
let mp_mul_new_spec n m = do {
    (a, ap) <- ptr_to_fresh_readonly "a" (llvm_array n digit_t);
    (b, bp) <- ptr_to_fresh_readonly "b" (llvm_array n digit_t);
    cp <- crucible_alloc (llvm_array m digit_t);
    n <- crucible_fresh_var "n" (llvm_int 32);

    crucible_execute_func [ap, bp, cp, tm n];

    points_to_fresh cp "_c" (llvm_array m digit_t);
    return ();
};

let mp_mul_single_new_spec n m = do {
    (a, ap) <- ptr_to_fresh_readonly "a" (llvm_array n digit_t);
    cp <- crucible_alloc (llvm_array m digit_t);
    n <- crucible_fresh_var "n" (llvm_int 32);

    crucible_execute_func [ap, ap, cp, tm n];

    points_to_fresh cp "_c" (llvm_array m digit_t);
    return ();
};

///////////////////////////////////////////////////////////////////////////////
// Proof commands

///////////////////////////////////////////////////////////////////////////////
// fpadd

fpadd_asm_ov <- verify_asm fpadd_asm_fun_name fpadd_spec;
fpadd_ov <- verify fpadd_fun_name [fpadd_asm_ov] fpadd_spec;

fpadd_asm_left_ov <- verify_asm fpadd_asm_fun_name fpadd_left_spec;
fpadd_left_ov <- verify fpadd_fun_name [fpadd_asm_left_ov] fpadd_left_spec;

fpadd_asm_right_ov <- verify_asm fpadd_asm_fun_name fpadd_right_spec;
fpadd_right_ov <- verify fpadd_fun_name [fpadd_asm_right_ov] fpadd_right_spec;

fpadd_asm_same_ov <- verify_asm fpadd_asm_fun_name fpadd_same_spec;
fpadd_same_ov <- verify fpadd_fun_name [fpadd_asm_same_ov] fpadd_same_spec;

fpadd_asm_pair_ov <- verify_asm fpadd_asm_fun_name fpadd_pair_spec;
fpadd_pair_ov <- verify fpadd_fun_name [fpadd_asm_pair_ov] fpadd_pair_spec;

///////////////////////////////////////////////////////////////////////////////
// fpsub

fpsub_asm_ov <- verify_asm fpsub_asm_fun_name fpsub_spec;
fpsub_ov <- verify fpsub_fun_name [fpsub_asm_ov] fpsub_spec;

fpsub_asm_left_ov <- verify_asm fpsub_asm_fun_name fpsub_left_spec;
fpsub_left_ov <- verify fpsub_fun_name [fpsub_asm_left_ov] fpsub_left_spec;

fpsub_asm_right_ov <- verify_asm fpsub_asm_fun_name fpsub_right_spec;
fpsub_right_ov <- verify fpsub_fun_name [fpsub_asm_right_ov] fpsub_right_spec;

fpsub_asm_same_ov <- verify_asm fpsub_asm_fun_name fpsub_same_spec;
fpsub_same_ov <- verify fpsub_fun_name [fpsub_asm_same_ov] fpsub_same_spec;

///////////////////////////////////////////////////////////////////////////////
// rdc_mont

rdc_mont_asm_ov <- verify_asm rdc_asm_fun_name rdc_mont_spec;
rdc_mont_ov <- verify rdc_mont_fun_name [rdc_mont_asm_ov] rdc_mont_spec;

///////////////////////////////////////////////////////////////////////////////
// mp_mul

mul_asm_ov <- verify_asm mp_mul_asm_fun_name (mp_mul_asm_spec nwords_field twice_nwords_field);
mul_ov <- verify mp_mul_fun_name [mul_asm_ov] (mp_mul_new_spec nwords_field twice_nwords_field);

mul_asm_single_ov <- verify_asm mp_mul_asm_fun_name
    (mp_mul_asm_single_spec nwords_field twice_nwords_field);
mul_single_ov <- verify mp_mul_fun_name
    [mul_asm_single_ov] (mp_mul_single_new_spec nwords_field twice_nwords_field);

///////////////////////////////////////////////////////////////////////////////
// mp_add

mp_add_asm_ov <- verify_asm mp_add_asm_fun_name mp_addfast_spec;
mp_addfast_ov <- verify mp_addfast_fun_name [mp_add_asm_ov] mp_addfast_spec;

///////////////////////////////////////////////////////////////////////////////
// mp_subaddx2

mp_subaddx2_asm_left_ov <- verify_asm mp_subaddx2_asm_fun_name mp_subaddfast_left_spec;
mp_subaddfast_left_ov <- verify mp_subaddfast_fun_name [mp_subaddx2_asm_left_ov] mp_subaddfast_left_spec;

///////////////////////////////////////////////////////////////////////////////
// mp_dblsubx2

mp_dblsubx2_asm_ov <- verify_asm mp_dblsubx2_asm_fun_name mp_dblsubfast_spec;
mp_dblsubfast_ov <- verify mp_dblsubfast_fun_name [mp_dblsubx2_asm_ov] mp_dblsubfast_spec;

let fast_ovs =
  [ mp_addfast_ov
  , mp_subaddfast_left_ov
  , mp_dblsubfast_ov
  ];

