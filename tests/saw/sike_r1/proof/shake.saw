// cshake.saw Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////////////
// Verify the hashing operations


///////////////////////////////////////////////////////////////////////////////
// Specifications

let state_t = llvm_array 25 digit_t;

let load64_spec = do {
    (x, xp) <- ptr_to_fresh_readonly "x" (llvm_array 8 char_t);
    crucible_execute_func [xp];
    r <- crucible_fresh_var "r" i64;
    crucible_return (tm r);
};

let store64_spec = do {
    xp <- crucible_alloc (llvm_array 8 char_t);
    u <- crucible_fresh_var "u" i64;
    crucible_execute_func [xp, tm u];
    x <- crucible_fresh_var "x" (llvm_array 8 char_t);
    crucible_points_to xp (tm x);
};

let KeccakF1600_StatePermute_spec = do {
    (s, sp) <- ptr_to_fresh "state" state_t;
    crucible_execute_func [sp];
    res_s <- crucible_fresh_var "res_s" state_t;
    crucible_points_to sp (tm res_s);
};

let shake256_spec outsz insz = do {
    outp <- crucible_alloc (llvm_array outsz char_t);
    (input, inputp) <- ptr_to_fresh_readonly "in" (llvm_array insz char_t);
    if eval_bool {{ `SIKE_REVISION == (2:[10]) }} then do {
        crucible_execute_func
            [ outp
            , tm {{ (`outsz : [64]) }}
            , inputp
            , tm {{ `insz:[64] }}
            ];
    } else do {
        cstm <- crucible_fresh_var "cstm" i16;
        crucible_execute_func
            [ outp
            , tm {{ (`outsz : [64]) }}
            , tm cstm
            , inputp
            , tm {{ `insz:[64] }}
            ];
    };
    out <- crucible_fresh_var "out" (llvm_array outsz char_t);
    crucible_points_to outp (tm out);
};


///////////////////////////////////////////////////////////////////////////////
// Proof commands

load64_ov <- verify load64_fun_name [] load64_spec;
store64_ov <- verify store64_fun_name [] store64_spec;

KeccakF1600_StatePermute_ov <- admit KeccakF1600_StatePermute_fun_name []
    (KeccakF1600_StatePermute_spec);

shake256_ov0 <- verify shake256_fun_name
    [ load64_ov
    , store64_ov
    , KeccakF1600_StatePermute_ov
    ]
    (shake256_spec SECRETKEY_A_BYTES CRYPTO_CIPHERTEXTBYTES);
shake256_ov1 <- verify shake256_fun_name
    [ load64_ov
    , store64_ov
    , KeccakF1600_StatePermute_ov
    ]
    (shake256_spec MSG_BYTES FP2_ENCODED_BYTES);
shake256_ov2 <- verify shake256_fun_name
    [ load64_ov
    , store64_ov
    , KeccakF1600_StatePermute_ov
    ]
    (shake256_spec CRYPTO_BYTES CIPHERTEXT_PLUS_MSG_BYTES);

