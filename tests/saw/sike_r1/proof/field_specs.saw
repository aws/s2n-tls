// field_common.saw Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

///////////////////////////////////////////////////////////////////////////////
// Specify the field operations

///////////////////////////////////////////////////////////////////////////////
// Specifications

let inplace_ptr_op_felm = do {
    (a, ap) <- B_felm_t "a";
    crucible_execute_func [ap];
    c <- crucible_fresh_var "_c" felm_t;
    crucible_points_to ap (tm c);
};

let unary_ptr_op_felm = do {
    (a, ap) <- A_felm_t "a";
    cp <- C_felm_t ();
    crucible_execute_func [ap, cp];
    c <- crucible_fresh_var "_c" felm_t;
    crucible_points_to cp (tm c);
};

let unary_ptr_op_felm_same = do {
    (a, ap) <- B_felm_t "a";
    crucible_execute_func [ap, ap];
    c <- crucible_fresh_var "_c" felm_t;
    crucible_points_to ap (tm c);
};

let binary_ptr_op_felm = do {
    (a, ap) <- A_felm_t "a";
    (b, bp) <- A_felm_t "b";
    cp <- C_felm_t ();
    crucible_execute_func [ap, bp, cp];
    c <- crucible_fresh_var "_c" felm_t;
    crucible_points_to cp (tm c);
};

let binary_ptr_op_felm_left = do {
    (a, ap) <- B_felm_t "a";
    (b, bp) <- A_felm_t "b";
    crucible_execute_func [ap, bp, ap];
    c <- crucible_fresh_var "_c" felm_t;
    crucible_points_to ap (tm c);
};

let binary_ptr_op_felm_right = do {
    (a, ap) <- A_felm_t "a";
    (b, bp) <- B_felm_t "b";
    crucible_execute_func [ap, bp, bp];
    c <- crucible_fresh_var "_c" felm_t;
    crucible_points_to bp (tm c);
};

let binary_ptr_op_felm_same = do {
    (a, ap) <- B_felm_t "a";
    crucible_execute_func [ap, ap, ap];
    c <- crucible_fresh_var "_c" felm_t;
    crucible_points_to ap (tm c);
};

let binary_ptr_op_felm_pair = do {
    (a, ap) <- A_felm_t "a";
    cp <- C_felm_t ();
    crucible_execute_func [ap, ap, cp];
    c <- crucible_fresh_var "_c" felm_t;
    crucible_points_to cp (tm c);
};

let inplace_ptr_op_f2elm = do {
    (a, ap) <- B_f2elm_t "a";
    crucible_execute_func [ap];
    c <- crucible_fresh_var "_c" f2elm_t;
    crucible_points_to ap (tm c);
};

let unary_ptr_op_f2elm = do {
    (a, ap) <- A_f2elm_t "a";
    cp <- C_f2elm_t ();
    crucible_execute_func [ap, cp];
    c <- crucible_fresh_var "_c" f2elm_t;
    crucible_points_to cp (tm c);
};

let unary_ptr_op_f2elm_same = do {
    (a, ap) <- B_f2elm_t "a";
    crucible_execute_func [ap, ap];
    c <- crucible_fresh_var "_c" f2elm_t;
    crucible_points_to ap (tm c);
};

let binary_ptr_op_f2elm = do {
    (a, ap) <- A_f2elm_t "a";
    (b, bp) <- A_f2elm_t "b";
    cp <- C_f2elm_t ();
    crucible_execute_func [ap, bp, cp];
    c <- crucible_fresh_var "_c" f2elm_t;
    crucible_points_to cp (tm c);
};

let binary_ptr_op_f2elm_left = do {
    (a, ap) <- B_f2elm_t "a";
    (b, bp) <- A_f2elm_t "b";
    crucible_execute_func [ap, bp, ap];
    c <- crucible_fresh_var "_c" f2elm_t;
    crucible_points_to ap (tm c);
};

let binary_ptr_op_f2elm_right = do {
    (a, ap) <- A_f2elm_t "a";
    (b, bp) <- B_f2elm_t "b";
    crucible_execute_func [ap, bp, bp];
    c <- crucible_fresh_var "_c" f2elm_t;
    crucible_points_to bp (tm c);
};

let binary_ptr_op_f2elm_same = do {
    (a, ap) <- B_f2elm_t "a";
    crucible_execute_func [ap, ap, ap];
    c <- crucible_fresh_var "_c" f2elm_t;
    crucible_points_to ap (tm c);
};

let binary_ptr_op_f2elm_pair = do {
    (a, ap) <- B_f2elm_t "a";
    (c, cp) <- B_f2elm_t "c";
    crucible_execute_func [ap, ap, cp];
    c <- crucible_fresh_var "_c" f2elm_t;
    crucible_points_to cp (tm c);
};


let fpzero_spec = do {
    cp <- C_felm_t ();
    crucible_execute_func [cp];
    c <- crucible_fresh_var "_c" felm_t;
    crucible_points_to cp (tm c);
};

let fpcopy_spec = do {
    (a, ap) <- A_felm_t "a";
    cp <- C_felm_t ();
    crucible_execute_func [ap, cp];
    crucible_points_to cp (tm a);
};

let fpcorrection_spec = inplace_ptr_op_felm;

let fpneg_spec = inplace_ptr_op_felm;

let fpadd_spec = binary_ptr_op_felm;
let fpadd_left_spec = binary_ptr_op_felm_left;
let fpadd_right_spec = binary_ptr_op_felm_right;
let fpadd_same_spec = binary_ptr_op_felm_same;
let fpadd_pair_spec = binary_ptr_op_felm_pair;

let fpsub_spec = binary_ptr_op_felm;
let fpsub_left_spec = binary_ptr_op_felm_left;
let fpsub_right_spec = binary_ptr_op_felm_right;
let fpsub_same_spec = binary_ptr_op_felm_same;

let fpdiv2_spec = unary_ptr_op_felm;
let fpdiv2_same_spec = unary_ptr_op_felm_same;

let rdc_mont_spec = do {
    (a, ap) <- B_dfelm_t "a";
    cp <- C_felm_t ();
    crucible_execute_func [ap, cp];
    c <- crucible_fresh_var "_c" felm_t;
    crucible_points_to cp (tm c);
};

let fpmul_mont_spec = binary_ptr_op_felm;
let fpmul_mont_left_spec = binary_ptr_op_felm_left;
let fpmul_mont_right_spec = binary_ptr_op_felm_right;
let fpmul_mont_same_spec = binary_ptr_op_felm_same;

let fpsqr_mont_spec = unary_ptr_op_felm;
let fpsqr_mont_same_spec = unary_ptr_op_felm_same;

let fpinv_chain_mont_spec = inplace_ptr_op_felm;

let fpinv_mont_spec = inplace_ptr_op_felm;

let to_mont_spec = unary_ptr_op_felm;
let to_mont_same_spec = unary_ptr_op_felm_same;

let from_mont_spec = unary_ptr_op_felm;

let fp2zero_spec = do {
    cp <- C_f2elm_t ();
    crucible_execute_func [cp];
    c <- crucible_fresh_var "_c" f2elm_t;
    crucible_points_to cp (tm c);
};

let fp2copy_spec = do {
    (a, ap) <- A_f2elm_t "a";
    cp <- C_f2elm_t ();
    crucible_execute_func [ap, cp];
    crucible_points_to cp (tm a);
};

let fp2correction_spec = inplace_ptr_op_f2elm;

let fp2neg_spec = inplace_ptr_op_f2elm;

let fp2add_spec = binary_ptr_op_f2elm;
let fp2add_left_spec = binary_ptr_op_f2elm_left;
let fp2add_right_spec = binary_ptr_op_f2elm_right;
let fp2add_same_spec = binary_ptr_op_f2elm_same;
let fp2add_pair_spec = binary_ptr_op_f2elm_pair;

let fp2sub_spec = binary_ptr_op_f2elm;
let fp2sub_left_spec = binary_ptr_op_f2elm_left;
let fp2sub_right_spec = binary_ptr_op_f2elm_right;
let fp2sub_same_spec = binary_ptr_op_f2elm_same;

let fp2div2_spec = unary_ptr_op_f2elm;
let fp2div2_same_spec = unary_ptr_op_f2elm_same;

let fp2mul_mont_spec = binary_ptr_op_f2elm;
let fp2mul_mont_left_spec = binary_ptr_op_f2elm_left;
let fp2mul_mont_right_spec = binary_ptr_op_f2elm_right;
let fp2mul_mont_same_spec = binary_ptr_op_f2elm_same;

let fp2sqr_mont_spec = unary_ptr_op_f2elm;
let fp2sqr_mont_same_spec = unary_ptr_op_f2elm_same;

let to_fp2mont_spec = unary_ptr_op_f2elm;
let to_fp2mont_same_spec = unary_ptr_op_f2elm_same;

let from_fp2mont_spec = unary_ptr_op_f2elm;

let fp2inv_mont_spec = inplace_ptr_op_f2elm;

let mp_addfast_spec = binary_ptr_op_felm;
let mp_subaddfast_left_spec = binary_ptr_op_f2elm_left;

let mp_dblsubfast_spec = do {
    (a, ap) <- A_f2elm_t "a";
    (b, bp) <- A_f2elm_t "b";
    (c, cp) <- B_f2elm_t "c";
    crucible_execute_func [ap, bp, cp];
    c' <- crucible_fresh_var "_c" f2elm_t;
    crucible_points_to cp (tm c');
};
