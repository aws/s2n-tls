//sidh.saw Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

///////////////////////////////////////////////////////////////////////////////
// Verify the SIDH functions

import "../spec/Loader.cry";
import "../spec/interface/sidh.cry";
import "../spec/shared/Constants.cry";

///////////////////////////////////////////////////////////////////////////////
// Specifications

// NOTE: While not stated in the code, this function should expect that the
//       parameter is in fact the encoding of a valid fp2 value.
//       We need that here to satisfy the precondition of its call
//       to to_fp2mont.

let fp2_decoden_spec n = do {
    xp <- C_f2elm_t ();
    (enc, encp) <- ptr_to_fresh_readonly "enc" (llvm_array n char_t);
    crucible_precond {{  is_good_fp2_encoding (take` {126} enc) }};
    crucible_execute_func [encp, xp];
    x <- crucible_fresh_var "fp2_decode" f2elm_t;
    crucible_points_to xp (tm x);
    crucible_postcond {{ fp2norm x == fp2_decode (take` {126} enc)}};
    crucible_postcond {{ pf2twice_mod x }};
};

let fp2_encode_spec = do {
    (x, xp) <- A_f2elm_t "x";
    crucible_precond {{ pf2twice_mod(x) }};
    encp <- crucible_alloc (llvm_array fp2_encoded_bytes i8);
    crucible_execute_func [xp, encp];
    crucible_points_to encp (tm {{ fp2_encode x }});
};

// NOTE: This version fits better with the way the fp/fp2 arithmetic specs
//       are written

let fp2_encode_norm_spec = do {
    (x, xp) <- A_f2elm_t "x";
    crucible_precond {{ pf2twice_mod(x) }};
    encp <- crucible_alloc (llvm_array fp2_encoded_bytes i8);
    crucible_execute_func [xp, encp];
    crucible_points_to encp (tm {{ fp2_encode (fp2norm x) }});
};

let init_basis_spec norm = do {

    (gen, genp) <- ptr_to_fresh_readonly "gen"
        (llvm_array (eval_int {{ 5*(`nwords_field:[32]) }}) digit_t);
    XPp <- C_f2elm_t ();
    XQp <- C_f2elm_t ();
    XRp <- C_f2elm_t ();
    crucible_execute_func [genp, XPp, XQp, XRp];
    XP <- crucible_fresh_var "XP" f2elm_t;
    crucible_points_to XPp (tm XP);
    XQ <- crucible_fresh_var "XQ" f2elm_t;
    crucible_points_to XQp (tm XQ);
    XR <- crucible_fresh_var "XR" f2elm_t;
    crucible_points_to XRp (tm XR);
    if norm then
        crucible_equal (tm {{[fp2norm XP, fp2norm XQ, fp2norm XR]}})
                       (tm {{ init_basis gen }})
    else
        crucible_equal (tm {{[XP, XQ, XR]}}) (tm {{ init_basis gen }});
};

let init_basis_spec' = do {

    (gen, genp) <- ptr_to_fresh_readonly "gen"
        (llvm_array (eval_int {{ 5*(`nwords_field:[32]) }}) digit_t);
    XPp <- C_f2elm_t ();
    XQp <- C_f2elm_t ();
    XRp <- C_f2elm_t ();
    crucible_precond {{ is_good_basis gen }};
    crucible_execute_func [genp, XPp, XQp, XRp];
    XP <- crucible_fresh_var "XP" f2elm_t;
    crucible_points_to XPp (tm XP);
    XQ <- crucible_fresh_var "XQ" f2elm_t;
    crucible_points_to XQp (tm XQ);
    XR <- crucible_fresh_var "XR" f2elm_t;
    crucible_points_to XRp (tm XR);
    crucible_equal (tm {{[XP, XQ, XR]}}) (tm {{ init_basis gen }});
    crucible_postcond {{ pf2twice_mod XP }};
    crucible_postcond {{ fp2norm XP == XP }};
    crucible_postcond {{ pf2twice_mod XQ }};
    crucible_postcond {{ fp2norm XQ == XQ }};
    crucible_postcond {{ pf2twice_mod XR }};
    crucible_postcond {{ fp2norm XR == XR }};
};

let random_mod_order_A_spec = do {
    let ty = (llvm_array max_words_order digit_t);
    random_digits_p <- crucible_alloc ty;
    crucible_execute_func [random_digits_p];
    random <- crucible_fresh_var "random" ty;
    crucible_points_to random_digits_p (tm random);
    crucible_postcond {{is_good_random_mod_order_A random}};
};

let random_mod_order_B_spec = do {
    let ty = (llvm_array max_words_order digit_t);
    random_digits_p <- crucible_alloc ty;
    crucible_execute_func [random_digits_p];
    random <- crucible_fresh_var "random" ty;
    crucible_points_to random_digits_p (tm random);
    crucible_postcond {{is_good_random_mod_order_B random}};
};

let random_mod_order_B_unint_spec = do {
    let ty = llvm_array 32 (llvm_int 8);
    random_digits_p <- crucible_alloc ty;
    crucible_execute_func [random_digits_p];
    crucible_points_to random_digits_p (crucible_term {{random_mod_order_B}});
};

/* NOTES for EphemeralKeyGeneration_A and _B:

-  We are unable to prove to full function due to its large number of iterations.
   Instead we work on a version that has a parameter that lets us iterate less.

 - We use some true facts about globals as preconditions.

*/

let ephemeralKeyGeneration_A_spec n f1 = do {
    (a, ap) <- ptr_to_fresh_readonly "PrivateKeyA" (llvm_array 32 char_t);
    bp <- crucible_alloc (llvm_array n char_t); // 378, minimum
    crucible_precond {{ pftwice_mod g_Montgomery_one }};
    crucible_precond {{ pftwice_mod zero }};
    crucible_precond {{ fpnorm zero == zero }};
    crucible_precond {{ fpnorm g_Montgomery_one == g_Montgomery_one }};
    crucible_precond {{ is_good_basis A_gen }};
    crucible_precond {{ is_good_basis B_gen }};
    crucible_execute_func [ap, bp, tm {{ `f1:[32] }}]; // MAX_Alice
    crucible_points_to bp (tm {{ EphemeralKeyGeneration_A_short a `f1 }});
    crucible_return (crucible_term {{ 0:[32] }});
};

let ephemeralKeyGeneration_B_spec f1 = do {
    (a, ap) <- ptr_to_fresh_readonly "PrivateKeyB" (llvm_array 32 char_t);
    bp <- crucible_alloc (llvm_array CRYPTO_PUBLICKEYBYTES char_t);
    crucible_precond {{ pftwice_mod g_Montgomery_one }};
    crucible_precond {{ pftwice_mod zero }};
    crucible_precond {{ fpnorm zero == zero }};
    crucible_precond {{ fpnorm g_Montgomery_one == g_Montgomery_one }};
    crucible_precond {{ is_good_basis A_gen }};
    crucible_precond {{ is_good_basis B_gen }};
    crucible_execute_func [ap, bp, tm {{ `f1:[32] }}]; // MAX_Bob
    b' <- crucible_fresh_var "b'" (llvm_array CRYPTO_PUBLICKEYBYTES char_t);
    crucible_points_to bp (tm b');
    crucible_postcond {{ b' == EphemeralKeyGeneration_B_short a `f1 }};
    crucible_return (crucible_term {{ 0:[32] }});
};

let addSelf_spec = do {
    (b, bp) <- B_f2elm_t "C24";
    crucible_precond {{ pf2twice_mod b }};
    crucible_execute_func [bp];
    b' <-crucible_fresh_var "c24_b" f2elm_t; 
    crucible_points_to bp  (tm b');
    crucible_postcond {{ fp2norm b' == addSelf (fp2norm b) }};
    crucible_postcond {{ pf2twice_mod b' }};
    crucible_return (crucible_term {{ 0:[32] }});
};

let traverse_tree_Secret_A_spec f1 = do {

    (a, ap) <- B_f2elm_t "A24plus";
    (b, bp) <- B_f2elm_t "C24";
    (d, dp) <- B_point_t "R";
    crucible_precond {{ pf2twice_mod a }};
    crucible_precond {{ pf2twice_mod b }};
    crucible_precond {{ point_mod d }};
    crucible_execute_func [ap, bp, dp,  tm {{ `f1: [32] }}];
    d' <-crucible_fresh_var "d8" point_proj_t;
    crucible_points_to dp  (tm d');
    crucible_postcond {{ point_norm d' ==
        traverse_tree_Secret_A (fp2norm a) (fp2norm b) ( point_norm d) `f1 }};
    crucible_postcond {{ point_mod d' }};
    crucible_return (crucible_term {{ 0:[32] }});
};

let ephemeralSecretAgreement_A_spec f1 = do {

    (a, ap) <- ptr_to_fresh_readonly "PrivateKeyA" (llvm_array 32 char_t);
    (b, bp) <- ptr_to_fresh_readonly "PublicKeyB" (llvm_array 378 char_t);
    ssbp <- crucible_alloc (llvm_array 126 i8); // "SharedSecretA"
    crucible_precond {{ is_good_pk_encoding b }};
    crucible_precond {{ pftwice_mod g_Montgomery_one }};
    crucible_precond {{ pftwice_mod zero }};
    crucible_precond {{ fpnorm zero == zero }};
    crucible_precond {{ fpnorm g_Montgomery_one == g_Montgomery_one }};
    crucible_execute_func [ap, bp, ssbp, tm {{`f1:[32]}}]; // MAX_Alice-125
    crucible_points_to ssbp
        (tm {{ EphemeralSecretAgreement_A_short  a b `f1 }});
    crucible_return (crucible_term {{ 0:[32] }});
};

let ephemeralSecretAgreement_B_spec (f1:Int) = do {
    (a, ap) <- ptr_to_fresh_readonly
        "PrivateKeyB" (llvm_array 32 char_t);
    (b, bp) <- ptr_to_fresh_readonly
        "PublicKeyA" (llvm_array CRYPTO_CIPHERTEXTBYTES char_t);
    ssbp <- crucible_alloc (llvm_array fp2_encoded_bytes i8);
    crucible_precond {{ is_good_pk_encoding (take b) }};
    crucible_precond {{ pftwice_mod g_Montgomery_one }};
    crucible_precond {{ pftwice_mod zero }};
    crucible_precond {{ fpnorm zero == zero }};
    crucible_precond {{ fpnorm g_Montgomery_one == g_Montgomery_one }};
    crucible_execute_func [ap, bp, ssbp, tm {{ `f1:[32] }}]; // MAX_Bob
    crucible_points_to ssbp
        (tm {{ EphemeralSecretAgreement_B_short a b `f1 }});
    crucible_return (crucible_term {{ 0:[32] }});
};

///////////////////////////////////////////////////////////////////////////////
// Proof commands

// NOTE: These overrides are proven for use are rewrites in later proofs.
//       Similar proofs were also done for LADDER3PT

basis_thm1 <- prove_print (tactic []) {{ (is_good_basis A_gen) == True }};
basis_thm2 <- prove_print (tactic []) {{ (is_good_basis B_gen) == True }};

random_mod_order_B_ov <- admit "random_mod_order_B"
    [clear_words_ov, randombytes_sidh_ov] random_mod_order_B_spec;
random_mod_order_B_unint_ov <- admit "random_mod_order_B"
    [] random_mod_order_B_unint_spec;

init_basis_ov <- verify "init_basis"
     [fpcopy503_ov, fpzero503_ov] (init_basis_spec false);
init_basis_ov' <- verify_unint "init_basis"
     [] ["fpnorm", "pftwice"]  init_basis_spec';

fp2_decode_ov_126 <- verify_unint "fp2_decode" [to_fp2mont_same_ov]
    ["to_fp2mont"] (fp2_decoden_spec  fp2_encoded_bytes);
fp2_encode_ov <- verify_unint "fp2_encode" [from_fp2mont_norm_ov]
    ["from_fp2mont", "pf2twice"]
    fp2_encode_norm_spec;

let O_base_Key =
    [ fpcopy503_ov, fpzero503_ov, fp2copy503_ov, fp2neg503_norm_ov
    , fpadd503_ov,  fpadd503_left_ov, fpadd503_same_ov, fpadd503_right_ov
    , fp2add503_ov, fp2add503_left_ov, fp2add503_same_ov, fp2add503_right_ov
    , fp2sub503_right_ov, fp2sub503_left_ov, fp2sub503_same_ov
    , swap_points_ov, xDBLADD_ov, fp2_encode_ov
    , LADDER3PT_ov, init_basis_ov', inv_3_way_ov
    , fp2mul503_mont_ov, fp2mul503_mont_left_ov ];

let O_base_Secret =
    [ fpcopy503_ov, fpzero503_ov, fp2copy503_ov
    , fp2add503_ov, fp2add503_left_ov, fp2add503_same_ov, fp2add503_right_ov
    , fp2sub503_right_ov, fp2sub503_left_ov, fp2sub503_same_ov
    , fp2div2_503_same_ov
    , swap_points_ov, xDBLADD_ov, fp2_encode_ov, j_inv_ov, get_A_ov ];

let O_base_SecretA = concat O_base_Secret
    [ fpadd503_same_norm_ov, fpadd503_pair_ov
    , LADDER3PT_ov, fp2div2_503_same_ov ];

let O_base_SecretB = concat O_base_Secret
    [fpadd503_same_norm_ov, fpadd503_pair_norm_ov , LADDER3PT_ov];

let O_base_Isog4 =
    [xDBLe_same32_ov, get_4_isog_ov, eval_4_isog_ov, fp2_decode_ov_126];

let O_base_Isog3 =
    [ xTPLe_same32_ov, get_3_isog_ov
    , eval_3_isog_ov, fp2_decode_ov_126 ];

let O_KeyGeneration_A = concat O_base_Key O_base_Isog4;
let O_KeyGeneration_B = concat O_base_Key O_base_Isog3;
let O_SecretAgreement_A = concat O_base_SecretA O_base_Isog4;
let O_SecretAgreement_B = concat O_base_SecretB O_base_Isog3;

let U_base_Key =
    ["fpadd503" , "fp2add503", "fpsub503", "fp2sub503","fp2sub503"
    , "fpmul503_mont", "fp2mul503_mont", "fp2neg503"
    , "fp2_decode", "fp2_encode", "fpnorm", "pftwice_mod"
    , "ladder3pt", "inv_3_way", "is_good_basis", "is_good_fp2_encoding"
    , "fpmul503_mont", "fp2mul503_mont" ];

let U_base_Secret =
    [ "fpadd503", "fp503add" , "fp2add503"
    , "fpsub503", "fp2sub503","fp2sub503"
    , "fpcopy", "fp2copy", "fp2_decode", "fp2_encode"
    , "ladder3pt", "ladder3pt_short", "ladder3pt_A", "ladder3pt_B"
    , "j_inv_match" ,"get_A_match" ];

let U_base_SecretA = concat U_base_Secret ["fp2div2_503"];
let U_base_Isog4 = ["get_4_isog", "eval_4_isog", "xDBLe_32"];
let U_base_Isog3 = ["get_3_isog", "eval_3_isog", "xTPLe_32"];
let U_KeyGeneration_A = concat U_base_Key U_base_Isog4;
let U_KeyGeneration_B = concat U_base_Key U_base_Isog3;
let U_SecretAgreement_A = concat U_base_SecretA  U_base_Isog4;
let U_SecretAgreement_B = concat U_base_Secret U_base_Isog3;

// NOTE: low-iteration cases for EphemeralKeyGeneration _A and _B

let kG_A e =
    verify_unint "EphemeralKeyGeneration_A"
        O_KeyGeneration_A
        U_KeyGeneration_A
        (ephemeralKeyGeneration_A_spec 378 e);

let kG_B e =
    verify_unint "EphemeralKeyGeneration_B"
        O_KeyGeneration_B
        U_KeyGeneration_B
        (ephemeralKeyGeneration_B_spec e);

kG_A 1;
kG_A 3;
kG_B 1;
kG_B 3;

// NOTE: low-iteration cases for EphemeralSecretAgreement _A and _B

let sA_A e =  do {
    verify_unint  "EphemeralSecretAgreement_A"
        O_SecretAgreement_A
        U_SecretAgreement_A
       	(ephemeralSecretAgreement_A_spec e);
};

let sA_B e =  do {
    verify_unint  "EphemeralSecretAgreement_B"
        O_SecretAgreement_B
        U_SecretAgreement_B
        (ephemeralSecretAgreement_B_spec e);};

sA_A 1;
sA_A 3;
sA_B 1;
sA_B 3;

// NOTE: Full iteration cases are not proven

let g_MAX_Alice = eval_int {{ (fromInteger g_MAX_Alice):[64] }};
ephemeralKeyGeneration_A_378_ov <- admit "EphemeralKeyGeneration_A"
     O_KeyGeneration_A (ephemeralKeyGeneration_A_spec 378 g_MAX_Alice);

let g_MAX_Bob = eval_int {{( fromInteger g_MAX_Bob):[64] }};
ephemeralKeyGeneration_B_ov <- admit "EphemeralKeyGeneration_B"
    O_KeyGeneration_B  (ephemeralKeyGeneration_B_spec g_MAX_Bob);
ephemeralSecretAgreement_A_ov <- admit "EphemeralSecretAgreement_A"
    O_SecretAgreement_A (ephemeralSecretAgreement_A_spec g_MAX_Alice);
ephemeralSecretAgreement_B_ov <- admit "EphemeralSecretAgreement_B"
    O_SecretAgreement_B (ephemeralSecretAgreement_B_spec g_MAX_Bob);
