diff --git a/utils/s2n_safety.h b/utils/s2n_safety.h
index eb9185e7..44b70221 100644
--- ../../../../../utils/s2n_safety.h
+++ s2n_safety.h
@@ -24,17 +24,15 @@
 #include "error/s2n_errno.h"
 
 /* NULL check a pointer */
-#define notnull_check( ptr )           do { if ( (ptr) == NULL ) { S2N_ERROR(S2N_ERR_NULL); } } while(0)
-#define notnull_check_ptr( ptr )       do { if ( (ptr) == NULL ) { S2N_ERROR_PTR(S2N_ERR_NULL); } } while(0)
+#define notnull_check( ptr )           __VERIFIER_assume(ptr != NULL)
+#define notnull_check_ptr( ptr )       __VERIFIER_assume(ptr != NULL)
+
+
+#define MEMCOPY_COST 2
+void * my_memset ( void * ptr, int value, size_t num );
 
 static inline void* trace_memcpy_check(void *restrict to, const void *restrict from, size_t size, const char *debug_str)
 {
-    if (to == NULL || from == NULL) {
-        s2n_errno = S2N_ERR_NULL;
-        s2n_debug_str = debug_str;
-        return NULL;
-    }
-
     return memcpy(to, from, size);
 }
 
@@ -42,20 +40,12 @@ static inline void* trace_memcpy_check(void *restrict to, const void *restrict f
  */
 #define memcpy_check( d, s, n )                                             \
   do {                                                                      \
-    __typeof( n ) __tmp_n = ( n );                                          \
-    if ( __tmp_n ) {                                                        \
-      void *r = trace_memcpy_check( (d), (s) , (__tmp_n), _S2N_DEBUG_LINE); \
-      if (r == NULL) { return -1; }                                         \
-    }                                                                       \
+    memcpy((d), (s), (n));						\
   } while(0)
 
 #define memcpy_check_ptr( d, s, n )                                         \
   do {                                                                      \
-    __typeof( n ) __tmp_n = ( n );                                          \
-    if ( __tmp_n ) {                                                        \
-      void *r = trace_memcpy_check( (d), (s) , (__tmp_n), _S2N_DEBUG_LINE); \
-      if (r == NULL) { return NULL; }                                       \
-    }                                                                       \
+    memcpy((d), (s), (n));						\
   } while(0)
 
 #define memset_check( d, c, n )                                             \
@@ -64,19 +54,19 @@ static inline void* trace_memcpy_check(void *restrict to, const void *restrict f
     if ( __tmp_n ) {                                                        \
       __typeof( d ) __tmp_d = ( d );                                        \
       notnull_check( __tmp_d );                                             \
-      memset( __tmp_d, (c), __tmp_n);                                       \
+      my_memset( __tmp_d, (c), __tmp_n);                                       \
     }                                                                       \
   } while(0)
 
 #define char_to_digit(c, d)  do { if(!isdigit(c)) { S2N_ERROR(S2N_ERR_SAFETY); } d = c - '0'; } while(0)
 
 /* Range check a number */
-#define gte_check(n, min)  do { if ( (n) < min ) { S2N_ERROR(S2N_ERR_SAFETY); } } while(0)
-#define lte_check(n, max)  do { if ( (n) > max ) { S2N_ERROR(S2N_ERR_SAFETY); } } while(0)
-#define gt_check(n, min)  do { if ( (n) <= min ) { S2N_ERROR(S2N_ERR_SAFETY); } } while(0)
-#define lt_check(n, max)  do { if ( (n) >= max ) { S2N_ERROR(S2N_ERR_SAFETY); } } while(0)
-#define eq_check(a, b)  do { if ( (a) != (b) ) { S2N_ERROR(S2N_ERR_SAFETY); } } while(0)
-#define ne_check(a, b)  do { if ( (a) == (b) ) { S2N_ERROR(S2N_ERR_SAFETY); } } while(0)
+#define gte_check(n, min)  __VERIFIER_assume( (n) >= (min) )
+#define lte_check(n, max)  __VERIFIER_assume( (n) <= (max) )
+#define gt_check(n, min)   __VERIFIER_assume( (n) >  (min) )
+#define lt_check(n, max)   __VERIFIER_assume( (n) <  (max) )
+#define eq_check(a, b)     __VERIFIER_assume( (a) ==  (b) )
+#define ne_check(a, b)     __VERIFIER_assume( (a) !=  (b) )
 #define inclusive_range_check( low, n, high )   \
   do  {                                         \
     __typeof( n ) __tmp_n = ( n );              \
@@ -90,9 +80,9 @@ static inline void* trace_memcpy_check(void *restrict to, const void *restrict f
     lt_check(__tmp_n, high);                    \
   } while (0)
 
-#define GUARD( x )              do {if ( (x) < 0 ) return S2N_FAILURE;} while (0)
-#define GUARD_GOTO( x , label ) do {if ( (x) < 0 ) goto label;} while (0)
-#define GUARD_PTR( x )          do {if ( (x) < 0 ) return NULL;} while (0)
+#define GUARD( x )              __VERIFIER_assume((x) == 0)
+#define GUARD_GOTO( x , label ) __VERIFIER_assume((x) == 0)
+#define GUARD_PTR( x )          __VERIFIER_assume((x) == 0)
 
 /* Check the return value from caller. If this value is -2, S2N_ERR_BLOCKED is marked*/
 #define GUARD_AGAIN( x )  do {if ( (x) == -2 ) { S2N_ERROR(S2N_ERR_BLOCKED); } GUARD( x );} while(0)
@@ -107,12 +97,7 @@ int s2n_in_unit_test_set(bool newval);
 #define S2N_IN_TEST ( s2n_in_unit_test() || S2N_IN_INTEG_TEST )
 
 /* TODO: use the OSSL error code in error reporting https://github.com/awslabs/s2n/issues/705 */
-#define GUARD_OSSL( x , errcode )               \
-  do {                                          \
-  if (( x ) != 1) {                             \
-    S2N_ERROR( errcode );                       \
-  }                                             \
-  } while (0)
+#define GUARD_OSSL( x , errcode ) __VERIFIER_assume( (x) == 1 )
 
 /**
  * Get the process id
