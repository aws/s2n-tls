diff --git a/utils/s2n_safety.c b/utils/s2n_safety.c
index 107bdb78..242ba7a5 100644
--- a/utils/s2n_safety.c
+++ b/utils/s2n_safety.c
@@ -57,16 +57,10 @@ pid_t s2n_actual_getpid()
  */
 bool s2n_constant_time_equals(const uint8_t * a, const uint8_t * b, const uint32_t len)
 {
-    S2N_PUBLIC_INPUT(a);
-    S2N_PUBLIC_INPUT(b);
-    S2N_PUBLIC_INPUT(len);
-
     PRECONDITION_POSIX(len == 0 || (a != NULL && b != NULL));
 
     uint8_t xor = 0;
     for (int i = 0; i < len; i++) {
-        /* Invariants must hold for each execution of the loop
-	 * and at loop exit, hence the <= */
         S2N_INVARIENT(i <= len);
         xor |= a[i] ^ b[i];
     }
@@ -86,10 +80,6 @@ bool s2n_constant_time_equals(const uint8_t * a, const uint8_t * b, const uint32
  */
 int s2n_constant_time_copy_or_dont(uint8_t * dest, const uint8_t * src, uint32_t len, uint8_t dont)
 {
-    S2N_PUBLIC_INPUT(dest);
-    S2N_PUBLIC_INPUT(src);
-    S2N_PUBLIC_INPUT(len);
-
 /* This underflows a value of 0 to the maximum value via arithmetic underflow,
  * so the check for arithmetic overflow/underflow needs to be disabled for CBMC.
  * Additionally, uint_fast16_t is defined as the fastest available unsigned
