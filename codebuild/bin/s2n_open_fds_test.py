# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

# This script parses the LastDynamicAnalysis file generated by CTest Memcheck.
# It identifies any leaking file descriptors and triggers an error when detected.
# This enhances the capabilities of existing Valgrind checks.
# Output snippet for open file descriptors:
# FILE DESCRIPTORS: 6 open (3 std) at exit.
#  ==6652== Open AF_INET socket 6: 127.0.0.1:36915 <-> unbound
#  ==6652==    at 0x498B2EB: socket (syscall-template.S:120)
#  ==6652==    by 0x16CD16: s2n_new_inet_socket_pair (s2n_self_talk_ktls_test.c:69)
#  ==6652==    by 0x15DBB2: main (s2n_self_talk_ktls_test.c:168)
#  ==6652==
#  ==6652== Open file descriptor 5: /codebuild/output/src109671166/src/github.com/boquan-fang/s2n-tls/build/bin/s2n_self_talk_ktls_test
#  ==6652==    at 0x497A175: open (open64.c:41)
#  ==6652==    by 0x15DA57: open (fcntl2.h:53)
#  ==6652==    by 0x15DA57: main (s2n_self_talk_ktls_test.c:138)
#  ==6652==
#  ==6652== Open file descriptor 3: /codebuild/output/src109671166/src/github.com/boquan-fang/s2n-tls/build/Testing/Temporary/LastDynamicAnalysis_20241023-2129.log.tmp
#  ==6652==    <inherited from parent>
#  ==6652==
#  ==6652==
import os
import sys

# Exit with error code 1 if leaking fds are detected.
ERROR_EXIT_CODE = 1


def open_analysis_file(path):
    for fl in os.listdir(path):
        if "LastDynamicAnalysis" in fl:
            file = open(os.path.join(path, fl), 'r')
    return file


def read_analysis_file(file):
    exit_code = 0
    to_print = False
    lines = file.readlines()
    for i in range(len(lines)):
        if "<end of output>" in lines[i]:
            to_print = False
            continue
        # Check if the line contains FILE DESCRITOPRS:
        if "FILE DESCRIPTORS: " in lines[i]:
            # If a process doesn't leak file descriptors
            # Then the next line will always be the file descriptor
            # for LastDynamicAnalysis log file.
            if not "LastDynamicAnalysis" in lines[i + 1]:
                # Print a new line to separate the old output from the new output
                print("")
                to_print = True
                print(lines[i][lines[i].find("FILE DESCRIPTORS: "):], end=" ")
                exit_code = ERROR_EXIT_CODE
                continue
            else:
                to_print = False
        if to_print:
            print(lines[i], end=" ")
    file.close()
    return exit_code


def print_banner():
    print("############################################################################")
    print("################# Test for Leaking File Descriptors ########################")
    print("############################################################################")


def main():
    print_banner()
    file = open_analysis_file(sys.argv[1])
    return read_analysis_file(file)


if __name__ == '__main__':
    sys.exit(main())
