# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

# This script parses the LastDynamicAnalysis file generated by CTest Memcheck.
# It identifies any leaking file descriptors and triggers an error when detected.
# This enhances the capabilities of existing Valgrind checks.
import os
import sys

# Exit with error code 1 if leaking fds are detected.
ERROR_EXIT_CODE = 1


def open_analysis_file(path):
    for fl in os.listdir(path):
        if "LastDynamicAnalysis" in fl:
            file = open(os.path.join(path, fl), 'r')
    return file


def read_analysis_file(file):
    exit_code = 0
    to_print = False
    lines = file.readlines()
    for i in range(len(lines)):
        if "<end of output>" in lines[i]:
            to_print = False
            continue
        # Check if the line contains FILE DESCRITOPRS:
        if "FILE DESCRIPTORS: " in lines[i]:
            # If a process doesn't leak file descriptors
            # Then the next line will always be the file descriptor
            # for LastDynamicAnalysis log file.
            if not "LastDynamicAnalysis" in lines[i + 1]:
                # Print a new line to separate the old output from the new output
                print("")
                to_print = True
                print(lines[i][lines[i].find("FILE DESCRIPTORS: "):], end=" ")
                exit_code = ERROR_EXIT_CODE
                continue
            else:
                to_print = False
        if to_print:
            print(lines[i], end=" ")
    file.close()
    return exit_code


def print_banner():
    print("############################################################################")
    print("################# Test for Leaking File Descriptors ########################")
    print("############################################################################")


def main():
    print_banner()
    file = open_analysis_file(sys.argv[1])
    return read_analysis_file(file)


if __name__ == '__main__':
    sys.exit(main())
